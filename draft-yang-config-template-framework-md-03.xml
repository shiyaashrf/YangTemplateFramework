<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.19 (Ruby 3.3.5) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>


<rfc ipr="trust200902" docName="draft-yang-config-template-framework" category="info" consensus="true" submissionType="IETF" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="yang-template-framework">Principle for populating list of YANG data nodes using a template technique.</title>

    <author fullname="Robert Peschi">
      <organization>Nokia</organization>
      <address>
        <postal>
          <city>Antwerp</city>
        </postal>
        <email>robert.peschi@nokia.com</email>
      </address>
    </author>
    <author fullname="Shiya Ashraf">
      <organization>Nokia</organization>
      <address>
        <postal>
          <city>Antwerp</city>
        </postal>
        <email>shiya.ashraf@nokia.com</email>
      </address>
    </author>
    <author fullname="Deepak Rajaram">
      <organization>Nokia</organization>
      <address>
        <postal>
          <city>Chennai</city>
        </postal>
        <email>deepak.rajaram@nokia.com</email>
      </address>
    </author>

    <date year="2024" month="October" day="07"/>

    <area>ops</area>
    <workgroup>netmod</workgroup>
    <keyword>templates</keyword> <keyword>profiles</keyword> <keyword>yang scalability</keyword>

    <abstract>


<?line 69?>

<t>This document presents a modelling technique for configuring large size devices in a compact way, when the device contains many similar data node patterns. This is realized by instructing the device to locally generate repetitive patterns of data nodes from a master copy called 'template' that is configured in the device. This technique is convenient and efficient as it reduces the running data store size and the network provisioning time. This modelling technique uses the current YANG specification features to date, with off-the shelf toolset.</t>



    </abstract>

    <note title="About This Document" removeInRFC="true">
      <t>
        The latest revision of this draft can be found at <eref target="https://example.com/LATEST"/>.
        Status information for this document may be found at <eref target="https://datatracker.ietf.org/doc/draft-yang-config-template/"/>.
      </t>
      <t>
        Discussion of this document takes place on the
        WG Working Group mailing list (<eref target="mailto:WG@example.com"/>),
        which is archived at <eref target="https://example.com/WG"/>.
      </t>
      <t>Source for this draft and an issue tracker can be found at
        <eref target="https://github.com/USER/REPO"/>.</t>
    </note>


  </front>

  <middle>


<?line 73?>

<section anchor="introduction"><name>Introduction</name>

<t>This draft considers the case of a device that contains a functional entity, characterized by a well-defined data nodes pattern, that is massively replicated and where each replication instance needs individual configuration with only limited variation.</t>

<t>Having a device manager that repetitively configures the device with each data nodes of each functional instance can become inconvenient and error prone. It could lead to performance issues, like long device configuration time, large memory footprint in the device and inefficient YANG validation procedures due to the large running data store size. This becomes more and more difficult as the system grows larger.</t>

<t>This draft proposes a technique to improve this, that is based on 'YANG templates' and that results in a small size running data store even when the device is very large.</t>

<t>We will call a 'YANG template' the configuration of a functional entity that the device is instructed to replicate multiple times to generate copies of the entity. The technique that we address in this draft allows to generate copies with the same data node values as in the template with the possibility, though, to overrule some of these values on an individual copy basis.</t>

<t>The general template technique detailed in this draft RFC does not suffer from the drawbacks mentioned earlier when the device manager explicitly configuring all device data nodes. Moreover, it relies on features available in the YANG language defined to date and it is supported by existing off-the-shelf toolset.</t>

<t>This method is not aimed at becoming a standard itself. It is a YANG modelling technique that can be considered, where appropriate, by any vendor or standardization organisation, when designing a YANG module for a specific purpose.</t>

<t>In the next sections we'll elaborate on some of the constructs to apply the template technique and highlight how to mitigate some potential issues. More specifically,
- How to define the template of a functional entity and how to instruct the device to replicate it, including per instance variations. 
- How the replication process takes place when expanding the template into functional entity instances configuration data nodes.</t>

</section>
<section anchor="template-technique-framework"><name>Template technique framework</name>

<section anchor="provisioning-the-running-data-store"><name>Provisioning the running data store</name>

<t>This section outlines how the device's running data store is utilized to implement the template technique.</t>

<t>In the YANG model of the device, many functional instances can be organized in a list. Since a template represents the typical configuration pattern of a functional instance, it is often necessary to choose between multiple templates for replication. 
For Example: 
The device may host various types of functional instances, each with its own specific data structure. Say, one template might define data nodes for a 'function-1' type, while another template could define nodes for a 'function-2' type.
For a given type of functional instance, different sets of values for the data nodes may be required. Say, a 'function-1' type might have templates for 'function-1-bronze-grade', 'function-1-silver-grade', and 'function-1-gold-grade' variants. As a result, multiple templates can also be organized into a list within the device's YANG model.</t>

<t>Assume for example, that “list a” and “list b” data nodes need to be configured in the device. Traditionally, the tree structure will be as below:</t>

<t>root</t>

<figure><artwork><![CDATA[
 +--(...)                     // out of scope
 |
 +--rw data-nodes-pattern     // container for functional instances
   
  +--rw instance* [name]    // the list of functional instances 
     +--rw name             string-ascii64
     +--rw description?     string-ascii128
     +--rw data
        +--rw list-a [name] //e.g. a list of interfaces
        |  +--rw name
        |  +--rw parm-x
        |  +--rw parm-y
        | 
        +--rw list-b [name] //e.g. a list of hw components
           +--rw name
           +--rw parm-t
           +--rw parm-u
]]></artwork></figure>

<t>In contrast, the YANG tree of a device using the template technique would appear as below:</t>

<t>root</t>

<figure><artwork><![CDATA[
 +--(...)                     // out of scope
 +--rw data-nodes-pattern     // container for functional instances
 +--rw template* [name]    // the list of templates
 |  +--rw name             string-ascii64
 |  +--rw description?     string-ascii128
 |  +--rw data
 |     +--rw list-a [name] //e.g. a list of interfaces
 |     |  +--rw name
 |     |  +--rw parm-x
 |     |  +--rw parm-y
 |     |
 |     +--rw list-b [name] //e.g. a list of hw components
 |        +--rw name
 |        +--rw parm-t
 |        +--rw parm-u
 |
 +--rw instance* [name]    // the list of functional instancss 
    +--rw name             string-ascii64
    +--rw description?     string-ascii128
    +--rw template?        -> /data-nodes-pattern/template/name
    +--rw data
       +--rw list-a [name] //e.g. a list of interfaces
       |  +--rw name
       |  +--rw parm-x
       |  +--rw parm-y
       |
       +--rw list-b [name] //e.g. a list of hw components
          +--rw name
          +--rw parm-t
          +--rw parm-u
]]></artwork></figure>

<t>Each entry in the 'template' list encompasses the generic configuration data nodes that are needed for all the functional entities to be addressed by this template, as contained in the 'data' container, in this example, ‘data nodes of list-a’ and ‘list-b’.</t>

<t>In practice, naturally, the more data nodes that can be replicated the more efficient the template technique will be.</t>

<t>Each entry in the 'instance’ list represents a copy to be made of the data nodes pattern defined by the leaf-ref 'template', to create a functional entity instance. The 'data' container contains all the data nodes needed to customize each copy of the template, by overruling one or the other data node value originating from the template, or possibly to add to the copy one or the other data nodes not provided by the template.</t>

<t>Although it is recommended that the same data nodes are defined in the 'data' container of 'template' and the 'data' container of 'instance’, only a limited number of such data nodes should be configured in the 'instance’. This reflects the assumption that functional instances should have only limited variations from their template model.</t>

<t>It should be noted that in a good application of the template technique, only few templates would suffice to generate a very large number of functional instances; in other words, the 'instance’ list would be much larger, typically by order of magnitudes, than the 'template' list.</t>

<t>A simple configuration example in the running data store of the device can be found at Appendix A.1</t>

</section>
<section anchor="device-expanding-the-running-data-store"><name>Device expanding the running data store</name>

<t>Once the configuration is applied to the device, the device will dynamically create each instance as specified.
The process for generating data nodes for a particular instance follows these steps:
•A copy of the template's data nodes is made, serving as the foundation for the instance's configuration.
•If any of these data nodes are also configured in the running data store for this instance, they will override the template values.
If an instance data node is configured in the running data store but not provided by the template, it will be added to the generated instance configuration.</t>

<t>The resulting instance expansion corresponding to the example in appendix A.1 is provided in Appendix A.2</t>

</section>
<section anchor="mandatories-and-defaults"><name>Mandatories and Defaults</name>

<t>While conceptually, the idea of templates improves the re-usability and consistency factor, there are certain nuances, which need to be addressed while handling data nodes in the grouping with defaults and mandatories.</t>

<t>If certain replicable data patterns contain default or mandatory values, and are used as-is both in the template and in the instance, 
-there is a possibility of silent and unintentional overwriting the configured value of the node in the template with the default value in the instance due to the merge operation.
-Mandatory data nodes must be unconditionally configured in the instance although they are already configured in the template, reducing the efficiency of the template mechanism.</t>

<t>Hence, while the same data nodes are used in the templates and instances, it is imperative that instance data nodes are without default and mandatory statements.</t>

<t>An easy way to do so is to define data nodes in a grouping without any mandatory or default statement. The grouping is suitable for use as-is in the instance definition, while, when used for the template definition, it just needs to be refined by adding mandatory and default statements where appropriate. Appendix B. provides some more details and an example.</t>

</section>
</section>
<section anchor="benefits-of-templates-in-yang-design"><name>Benefits of Templates in YANG Design</name>

<t><list style="numbers" type="1">
  <t>Reusability:
Templates encourage reusability by allowing common structures to be defined once and reused multiple times. This reduces duplication and simplifies model management.</t>
  <t>Consistency:
By using templates, similar configurations are defined and applied uniformly, leading to more consistent data modelling and network configuration management.</t>
  <t>Simplified Maintenance:
When a template is modified, all places where it is used will automatically reflect those changes, reducing the effort required to maintain and update the model.</t>
  <t>Modularity:
Templates promote a modular approach to YANG model design. By splitting the model into reusable parts, it becomes easier to scale and extend.</t>
</list></t>

</section>
<section anchor="appendix"><name>Appendix</name>

<section anchor="a-example-of-applying-the-template-method"><name>A. Example of applying the template method.</name>

<section anchor="a1-device-running-data-store-using-the-template-mechanism"><name>A.1. Device running data store using the template mechanism</name>

<t>In this example, one template ‘template-1’ is configured and three instances are configured, to be derived from ‘template-1’ and with limited overruling of the template values.</t>

<figure><artwork><![CDATA[
 <config>
 <data-nodes-pattern>
 <template>
  <name>template-1</name>
  <description>A typical configuration</description>
  <data>
    <list-a>
      <name>templ-1-list-a-entry-1</name>
      <parm-x>1</parm-x>
      <parm-y>30</parm-y>
    </list-a>
    <list-a>
      <name>templ-1-list-a-entry-2</name>
      <parm-x>3</parm-x>
      <parm-y>30</parm-y>
    </list-a>
     <list-a>
      <name>templ-1-list-a-entry-3</name>
      <parm-x>3</parm-x>
      <parm-y>50</parm-y>
    </list-a>
    <list-b>
      <name>templ-1-list-b-entry-1</name>
      <parm-t>2</parm-t>
      <parm-u>40</parm-u>
    </list-b>
    <list-b>
      <name>templ-1-list-b-entry-2</name>
      <parm-t>4</parm-t>
      <parm-u>60</parm-u>
    </list-b>
    <list-b>
      <name>templ-1-list-b-entry-3</name>
      <parm-t>4</parm-t>
      <parm-u>80</parm-u>
    </list-b>
  </data>
</template>

<instance>                         // a first instance
  <name>instance-1</name>
  <template>template-1</template>  <!--config is derived from "template-1"-->
  <data>
    <list-a>
      <name>templ-1-list-a-entry-2</name> <!-- name is also inherited from template-->
      <parm-y>33</parm-y>         <!--overrule template value "30" with "33"-->
    </list-a>
  </data>
</instance>

<instance>                         // a second instance
  <name>instance-2</name>
  <template>template-1</template> <!--config is derived from "template-1"-->
  <data>                          // nothing from template to be overruled
  </data>
</instance>

<instance>                        // a third instance
  <name>instance-3</name>
  <template>template-1</template> <!--config is derived from "template-1"-->
  <data>
    <list-a>
      <name>templ-1-list-a-entry-3</name> <!--name is also inherited from template-->
      <parm-y>55</parm-y>          <!--overrule template value "50" with "55"-->
    </list-a>
    <list-b>
      <name>templ-1-list-b-entry-3</name> <!--name is also inherited from template-->
      <parm-u>88</parm-u>         <!--overrule template value "80" with "88"-->
    </list-b>
  </data>
</instance>
 </data-nodes-pattern>
 </config>
]]></artwork></figure>

</section>
<section anchor="a2-data-generated-by-the-template-mechanism"><name>A.2. Data generated by the template mechanism</name>

<t>The running data store example in section A.1 leads the device to generate the following data used to control the instances (without the aid of the template mechanism, this data would need to explicitly come from the running data store, instead of being locally expanded):</t>

<t>generated through instance-1 merged with template-1 expansion</t>

<figure><artwork><![CDATA[
  <data>
    <list-a>
      <name>templ-1-list-a-entry-1</name>
      <parm-x>1</parm-x>
      <parm-y>30</parm-y>
    </list-a>
    <list-a>
      <name>templ-1-list-a-entry-2</name>
      <parm-x>3</parm-x>       
      <parm-y>33</parm-y>     <!-- needed to depart from template value-->
    </list-a>
     <list-a>
      <name>templ-1-list-a-entry-3</name>
      <parm-x>3</parm-x>
      <parm-y>50</parm-y>
    </list-a>
    <list-b>
      <name>templ-1-list-b-entry-1</name>
      <parm-t>2</parm-t>
      <parm-u>40</parm-u>
    </list-b>
    <list-b>
      <name>templ-1-list-b-entry-2</name>
      <parm-t>4</parm-t>
      <parm-u>60</parm-u>
    </list-b>
    <list-b>
      <name>templ-1-list-b-entry-3</name>
      <parm-t>4</parm-t>
      <parm-u>80</parm-u>
    </list-b>
  </data>
]]></artwork></figure>

<t>(generated through instance-2 merged with template-1 expansion)</t>

<figure><artwork><![CDATA[
  <data>
    <list-a>
      <name>templ-1-list-a-entry-1</name>
      <parm-x>1</parm-x>
      <parm-y>30</parm-y>
    </list-a>
    <list-a>
      <name>templ-1-list-a-entry-2</name>
      <parm-x>3</parm-x>       
      <parm-y>30</parm-y>
    </list-a>
     <list-a>
      <name>templ-1-list-a-entry-3</name>
      <parm-x>3</parm-x>
      <parm-y>50</parm-y>
    </list-a>
    <list-b>
      <name>templ-1-list-b-entry-1</name>
      <parm-t>2</parm-t>
      <parm-u>40</parm-u>
    </list-b>
    <list-b>
      <name>templ-1-list-b-entry-2</name>
      <parm-t>4</parm-t>
      <parm-u>60</parm-u>
    </list-b>
    <list-b>
      <name>templ-1-list-b-entry-3</name>
      <parm-t>4</parm-t>
      <parm-u>80</parm-u>
    </list-b>
  </data>
]]></artwork></figure>

<t>(generated through instance-3 merged with template-1 expansion)</t>

<figure><artwork><![CDATA[
  <data>
    <list-a>
      <name>templ-1-list-a-entry-1</name>
      <parm-x>1</parm-x>
      <parm-y>30</parm-y>
    </list-a>
    <list-a>
      <name>templ-1-list-a-entry-2</name>
      <parm-x>3</parm-x>       
      <parm-y>30</parm-y>
    </list-a>
     <list-a>
      <name>templ-1-list-a-entry-3</name>
      <parm-x>3</parm-x>
      <parm-y>55</parm-y>     <!-- needed to depart from template value-->
    </list-a>
    <list-b>
      <name>templ-1-list-b-entry-1</name>
      <parm-t>2</parm-t>
      <parm-u>40</parm-u>
    </list-b>
    <list-b>
      <name>templ-1-list-b-entry-2</name>
      <parm-t>4</parm-t>
      <parm-u>60</parm-u>
    </list-b>
    <list-b>
      <name>templ-1-list-b-entry-3</name>
      <parm-t>4</parm-t>
      <parm-u>88</parm-u>     <!--needed to depart from template value -->
    </list-b>
  </data>
]]></artwork></figure>

</section>
</section>
<section anchor="appendix-b-using-existing-yang-constructs-in-template-and-instance-yang-definition"><name>Appendix B. Using existing yang constructs in template and instance YANG definition</name>

<t>This appendix illustrates the use of groupings in the YANG definition of template and instances and more specifically it shows how easily mandatory and default statements can be introduced in the template definition by ‘refining’ the grouping ‘use’ statement.</t>

<section anchor="the-grouping-construct"><name>The ‘grouping’ construct</name>

<t>By defining common structures using grouping, one avoids repeating code, ensures consistency and makes future changes easier since modifications only need to happen in one place.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
 grouping interface-config {
 leaf parm-a {
   type string;
 }
 leaf parm-b {
   type boolean;
 }
 leaf parm-c {
   type unint32;
 }
]]></artwork></figure>

<t>}</t>

<t>This ‘interface-config’ grouping defines a common structure that can be reused across different YANG modules or different parts of the same module.</t>

</section>
<section anchor="the-uses-statement"><name>The ‘uses’ statement</name>

<t>The ‘uses’ statement applies a previously defined grouping where needed in the model (e.g. it copies the data nodes of the grouping at the place of the ‘use’ statement’.</t>

<t>As an example, the data nodes defined in the grouping above can be used in the template and in the instance definition:</t>

<figure><artwork><![CDATA[
 container data-nodes-pattern {
 list template {
  key “name”;
  leaf name {
    type string;
  }
  container data {
    list interface {
      key "interface-name";
      leaf name {
        type string;
      }
      uses interface-config;
    }
  }
}
list instance {
  key “name”;
  leaf name {
    type string;
  }
  container data {
    list interface {
      key "interface-name";
      leaf name {
        type string;
      }
      uses interface-config;
    }
  }
}   }
]]></artwork></figure>

</section>
<section anchor="the-refine-statement-to-control-default-and-mandatory-statements"><name>The ‘refine’ statement to control default and mandatory statements</name>

<t>As explained in section 2.4, with the template method, some data nodes may need a default or mandatory statement when used for the template definition but should have no mandatory neither default statements when used for the instance definition.</t>

<t>The ‘refine’ statement defined in YANG 1.1 easily allows to control mandatory and default statements at the place of the ‘uses’ statement.</t>

<t>Assume in our example that it is desired that ‘parm-b’ has a default statement and ‘parm-c’ has a mandatory statement when they are used for the template definition.</t>

<t>Then the YANG becomes:</t>

<figure><artwork><![CDATA[
 container data-nodes-pattern {
 list template {
  key “name”;
  leaf name {
    type string;
  }
  container data {
    list interface {
      key "interface-name";
      uses interface-config {
        refine parm-b {
          default “true”
        }
        refine parm-c {
          mandatory true
        }
      }
    }
  }
}
list instance {
  key “name”;
  leaf name {
    type string;
  }
  container data {
    list interface {
      key "interface-name";
      uses interface-config;
    }
  }
}   }
]]></artwork></figure>

</section>
</section>
</section>
<section anchor="conclusion"><name>Conclusion</name>

<t>Using templates in YANG allows to efficiently configure large amounts of similar data nodes while keeping the running data store size small. This is beneficial in term of device memory footprint, ease of configuration, configuration time and potentially YANG validation processing in the device. This draft explains some practicalities of the template method, including how to ensure that mandatory and default statements don’t jeopardize the effectiveness of the method. A follow up draft is planned which  will address how the template method described in this draft could also be used considering data nodes already defined in existing IETF standards.</t>

</section>
<section anchor="conventions-and-definitions"><name>Conventions and Definitions</name>

<t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<?line -18?>

</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<t>TODO Security</t>

</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<t>This document has no IANA actions.</t>

</section>


  </middle>

  <back>



    <references title='Normative References' anchor="sec-normative-references">



<reference anchor="RFC2119">
  <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author fullname="S. Bradner" initials="S." surname="Bradner"/>
    <date month="March" year="1997"/>
    <abstract>
      <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="2119"/>
  <seriesInfo name="DOI" value="10.17487/RFC2119"/>
</reference>
<reference anchor="RFC8174">
  <front>
    <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
    <author fullname="B. Leiba" initials="B." surname="Leiba"/>
    <date month="May" year="2017"/>
    <abstract>
      <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="8174"/>
  <seriesInfo name="DOI" value="10.17487/RFC8174"/>
</reference>



    </references>




<?line 553?>

<section numbered="false" anchor="acknowledgments"><name>Acknowledgments</name>

<t>TODO acknowledge.</t>

</section>


  </back>

<!-- ##markdown-source:
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
l2EmMgh//hcMI3CZQ1gAAA==

-->

</rfc>

