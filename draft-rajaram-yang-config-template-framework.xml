<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.19 (Ruby 3.3.5) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>


<rfc ipr="trust200902" docName="draft-yang-config-template-framework" category="info" consensus="true" submissionType="IETF" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="yang-template-framework">Populating a list of YANG data nodes using templates.</title>

    <author fullname="Robert Peschi">
      <organization>Nokia</organization>
      <address>
        <postal>
          <city>Antwerp</city>
        </postal>
        <email>robert.peschi@nokia.com</email>
      </address>
    </author>
    <author fullname="Shiya Ashraf">
      <organization>Nokia</organization>
      <address>
        <postal>
          <city>Antwerp</city>
        </postal>
        <email>shiya.ashraf@nokia.com</email>
      </address>
    </author>
    <author fullname="Deepak Rajaram">
      <organization>Nokia</organization>
      <address>
        <postal>
          <city>Chennai</city>
        </postal>
        <email>deepak.rajaram@nokia.com</email>
      </address>
    </author>

    <date year="2024" month="October" day="10"/>

    <area>ops</area>
    <workgroup>netmod</workgroup>
    <keyword>templates</keyword> <keyword>profiles</keyword> <keyword>yang scalability</keyword>

    <abstract>


<?line 68?>

<t>This document presents a modeling technique for configuring large size devices in a compact way, when the device contains many similar data node patterns. This is realized by instructing the device to locally generate repetitive patterns of data nodes from a master copy called 'template' that is configured in the device. This technique is convenient and efficient as it reduces the running data store size and the network provisioning time. This modelling technique uses the current YANG specification features to date, with off-the shelf toolset.</t>



    </abstract>

    <note title="About This Document" removeInRFC="true">
      <t>
        Status information for this document may be found at <eref target="https://datatracker.ietf.org/doc/draft-yang-config-template/"/>.
      </t>
      <t>
        Discussion of this document takes place on the
        netmod Working Group mailing list (<eref target="mailto:netmod@ietf.org"/>),
        which is archived at <eref target="https://mailarchive.ietf.org/arch/browse/netmod/"/>.
        Subscribe at <eref target="https://www.ietf.org/mailman/listinfo/netmod/"/>.
      </t>
    </note>


  </front>

  <middle>


<?line 72?>

<section anchor="introduction"><name>Introduction</name>

<t>This draft considers the case of a device that contains a functional entity, characterized by a well-defined data nodes pattern, that is massively replicated and where each replication instance needs individual configuration with only limited variation.</t>

<t>Having a device manager that repetitively configures the device with each data nodes of each functional instance can become inconvenient and error prone. It could lead to performance issues, like long device configuration time, large memory footprint in the device and inefficient YANG validation procedures due to the large running data store size. This becomes more and more difficult as the system grows larger.</t>

<t>This draft proposes a technique to improve this, that is based on 'YANG templates' and that results in a small size running data store even when the device is very large.</t>

<t>We will call a 'YANG template' the configuration of a functional entity that the device is instructed to replicate multiple times to generate copies of the entity. The technique that we address in this draft allows to generate copies with the same data node values as in the template with the possibility, though, to overrule some of these values on an individual copy basis.</t>

<t>The general template technique detailed in this draft RFC does not suffer from the drawbacks mentioned earlier when the device manager explicitly configuring all device data nodes. Moreover, it relies on features available in the YANG language defined to date and it is supported by existing off-the-shelf toolset.</t>

<t>This method is not aimed at becoming a standard itself. It is a YANG modeling technique that can be considered, where appropriate, by any vendor or standardization organization, when designing a YANG module for a specific purpose.</t>

<t>In the next sections we'll elaborate on some of the constructs to apply the template technique and highlight how to mitigate some potential issues. More specifically,
- How to define the template of a functional entity and how to instruct the device to replicate it, including per instance variations. 
- How the replication process takes place when expanding the template into functional entity instances configuration data nodes.</t>

</section>
<section anchor="template-technique-framework"><name>Template technique framework</name>

<section anchor="provisioning-the-running-data-store"><name>Provisioning the running data store</name>

<t>This section outlines how the device's running data store is utilized to implement the template technique.</t>

<t>In the YANG model of the device, many functional instances can be organized in a list. Since a template represents the typical configuration pattern of a functional instance, it is often necessary to choose between multiple templates for replication. 
For Example: 
The device may host various types of functional instances, each with its own specific data structure. Say, one template might define data nodes for a 'function-1' type, while another template could define nodes for a 'function-2' type.
For a given type of functional instance, different sets of values for the data nodes may be required. Say, a 'function-1' type might have templates for 'function-1-bronze-grade', 'function-1-silver-grade', and 'function-1-gold-grade' variants. As a result, multiple templates can also be organized into a list within the device's YANG model.</t>

<t>Assume for example, that “list a” and “list b” data nodes need to be configured in the device. Traditionally, the tree structure will be as below:</t>

<t>root</t>

<figure><artwork><![CDATA[
 +--(...)                     // out of scope
 |
 +--rw data-nodes-pattern     // container for functional instances
   
  +--rw instance* [name]    // the list of functional instances 
     +--rw name             string-ascii64
     +--rw description?     string-ascii128
     +--rw data
        +--rw list-a [name] //e.g. a list of interfaces
        |  +--rw name
        |  +--rw parm-x
        |  +--rw parm-y
        | 
        +--rw list-b [name] //e.g. a list of hardware components
           +--rw name
           +--rw parm-t
           +--rw parm-u
]]></artwork></figure>

<t>In contrast, the YANG tree of a device using the template technique would appear as below:</t>

<t>root</t>

<figure><artwork><![CDATA[
 +--(...)                     // out of scope
 +--rw data-nodes-pattern     // container for functional instances
 +--rw template* [name]    // the list of templates
 |  +--rw name             string-ascii64
 |  +--rw description?     string-ascii128
 |  +--rw data
 |     +--rw list-a [name] //e.g. a list of interfaces
 |     |  +--rw name
 |     |  +--rw parm-x
 |     |  +--rw parm-y
 |     |
 |     +--rw list-b [name] //e.g. a list of hardware components
 |        +--rw name
 |        +--rw parm-t
 |        +--rw parm-u
 |
 +--rw instance* [name]    // the list of functional instances 
    +--rw name             string-ascii64
    +--rw description?     string-ascii128
    +--rw template?        -> /data-nodes-pattern/template/name
    +--rw data
       +--rw list-a [name] //e.g. a list of interfaces
       |  +--rw name
       |  +--rw parm-x
       |  +--rw parm-y
       |
       +--rw list-b [name] //e.g. a list of hardware components
          +--rw name
          +--rw parm-t
          +--rw parm-u
]]></artwork></figure>

<t>Each entry in the 'template' list encompasses the generic configuration data nodes that are needed for all the functional entities to be addressed by this template, as contained in the 'data' container, in this example, ‘data nodes of list-a’ and ‘list-b’.</t>

<t>In practice, naturally, the more data nodes that can be replicated the more efficient the template technique will be.</t>

<t>Each entry in the 'instance’ list represents a copy to be made of the data nodes pattern defined by the leaf-ref 'template', to create a functional entity instance. The 'data' container contains all the data nodes needed to customize each copy of the template, by overruling one or the other data node value originating from the template, or possibly to add to the copy one or the other data nodes not provided by the template.</t>

<t>Although it is recommended that the same data nodes are defined in the 'data' container of 'template' and the 'data' container of 'instance’, only a limited number of such data nodes should be configured in the 'instance’. This reflects the assumption that functional instances should have only limited variations from their template model.</t>

<t>It should be noted that in a good application of the template technique, only few templates would suffice to generate a very large number of functional instances; in other words, the 'instance’ list would be much larger, typically by order of magnitudes, than the 'template' list.</t>

<t>A simple configuration example in the running data store of the device can be found at Appendix A.1</t>

</section>
<section anchor="device-expanding-the-running-data-store"><name>Device expanding the running data store</name>

<t>Once the configuration is applied to the device, the device will dynamically create each instance as specified.
The process for generating data nodes for a particular instance follows these steps:
•A copy of the template's data nodes is made, serving as the foundation for the instance's configuration.
•If any of these data nodes are also configured in the running data store for this instance, they will override the template values.
If an instance data node is configured in the running data store but not provided by the template, it will be added to the generated instance configuration.</t>

<t>The resulting instance expansion corresponding to the example in appendix A.1 is provided in Appendix A.2</t>

</section>
<section anchor="mandatories-and-defaults"><name>Mandatories and Defaults</name>

<t>While conceptually, the idea of templates improves the re-usability and consistency factor, there are certain nuances, which need to be addressed while handling data nodes in the grouping with defaults and mandatories.</t>

<t>If certain replicable data patterns contain default or mandatory values, and are used as-is both in the template and in the instance, 
-there is a possibility of silent and unintentional overwriting the configured value of the node in the template with the default value in the instance due to the merge operation.
-Mandatory data nodes must be unconditionally configured in the instance although they are already configured in the template, reducing the efficiency of the template mechanism.</t>

<t>Hence, while the same data nodes are used in the templates and instances, it is imperative that instance data nodes are without default and mandatory statements.</t>

<t>An easy way to do so is to define data nodes in a grouping without any mandatory or default statement. The grouping is suitable for use as-is in the instance definition, while, when used for the template definition, it just needs to be refined by adding mandatory and default statements where appropriate. Appendix B. provides some more details and an example.</t>

</section>
</section>
<section anchor="benefits-of-templates-in-yang-design"><name>Benefits of Templates in YANG Design</name>

<t><list style="numbers" type="1">
  <t>Reusability:
Templates encourage reusability by allowing common structures to be defined once and reused multiple times. This reduces duplication and simplifies model management.</t>
  <t>Consistency:
By using templates, similar configurations are defined and applied uniformly, leading to more consistent data modeling and network configuration management.</t>
  <t>Simplified Maintenance:
When a template is modified, all places where it is used will automatically reflect those changes, reducing the effort required to maintain and update the model.</t>
  <t>Modularity:
Templates promote a modular approach to YANG model design. By splitting the model into reusable parts, it becomes easier to scale and extend.</t>
</list></t>

</section>
<section anchor="appendix"><name>Appendix</name>

<section anchor="a-example-of-applying-the-template-method"><name>A. Example of applying the template method.</name>

<section anchor="a1-device-running-data-store-using-the-template-mechanism"><name>A.1. Device running data store using the template mechanism</name>

<t>In this example, one template ‘template-1’ is configured, and three instances are configured, to be derived from ‘template-1’ and with limited overruling of the template values.</t>

<figure><artwork><![CDATA[
 <config>
 <data-nodes-pattern>
 <template>
  <name>template-1</name>
  <description>A typical configuration</description>
  <data>
    <list-a>
      <name>templ-1-list-a-entry-1</name>
      <parm-x>1</parm-x>
      <parm-y>30</parm-y>
    </list-a>
    <list-a>
      <name>templ-1-list-a-entry-2</name>
      <parm-x>3</parm-x>
      <parm-y>30</parm-y>
    </list-a>
     <list-a>
      <name>templ-1-list-a-entry-3</name>
      <parm-x>3</parm-x>
      <parm-y>50</parm-y>
    </list-a>
    <list-b>
      <name>templ-1-list-b-entry-1</name>
      <parm-t>2</parm-t>
      <parm-u>40</parm-u>
    </list-b>
    <list-b>
      <name>templ-1-list-b-entry-2</name>
      <parm-t>4</parm-t>
      <parm-u>60</parm-u>
    </list-b>
    <list-b>
      <name>templ-1-list-b-entry-3</name>
      <parm-t>4</parm-t>
      <parm-u>80</parm-u>
    </list-b>
  </data>
</template>

<instance>                         // a first instance
  <name>instance-1</name>
  <template>template-1</template>  <!--config is derived from "template-1"-->
  <data>
    <list-a>
      <name>templ-1-list-a-entry-2</name> <!-- name is also inherited from template-->
      <parm-y>33</parm-y>         <!--overrule template value "30" with "33"-->
    </list-a>
  </data>
</instance>

<instance>                         // a second instance
  <name>instance-2</name>
  <template>template-1</template> <!--config is derived from "template-1"-->
  <data>                          // nothing from template to be overruled
  </data>
</instance>

<instance>                        // a third instance
  <name>instance-3</name>
  <template>template-1</template> <!--config is derived from "template-1"-->
  <data>
    <list-a>
      <name>templ-1-list-a-entry-3</name> <!--name is also inherited from template-->
      <parm-y>55</parm-y>          <!--overrule template value "50" with "55"-->
    </list-a>
    <list-b>
      <name>templ-1-list-b-entry-3</name> <!--name is also inherited from template-->
      <parm-u>88</parm-u>         <!--overrule template value "80" with "88"-->
    </list-b>
  </data>
</instance>
 </data-nodes-pattern>
 </config>
]]></artwork></figure>

</section>
<section anchor="a2-data-generated-by-the-template-mechanism"><name>A.2. Data generated by the template mechanism</name>

<t>The running data store example in section A.1 leads the device to generate the following data used to control the instances (without the aid of the template mechanism, this data would need to explicitly come from the running data store, instead of being locally expanded):</t>

<t>generated through instance-1 merged with template-1 expansion</t>

<figure><artwork><![CDATA[
  <data>
    <list-a>
      <name>templ-1-list-a-entry-1</name>
      <parm-x>1</parm-x>
      <parm-y>30</parm-y>
    </list-a>
    <list-a>
      <name>templ-1-list-a-entry-2</name>
      <parm-x>3</parm-x>       
      <parm-y>33</parm-y>     <!-- needed to depart from template value-->
    </list-a>
     <list-a>
      <name>templ-1-list-a-entry-3</name>
      <parm-x>3</parm-x>
      <parm-y>50</parm-y>
    </list-a>
    <list-b>
      <name>templ-1-list-b-entry-1</name>
      <parm-t>2</parm-t>
      <parm-u>40</parm-u>
    </list-b>
    <list-b>
      <name>templ-1-list-b-entry-2</name>
      <parm-t>4</parm-t>
      <parm-u>60</parm-u>
    </list-b>
    <list-b>
      <name>templ-1-list-b-entry-3</name>
      <parm-t>4</parm-t>
      <parm-u>80</parm-u>
    </list-b>
  </data>
]]></artwork></figure>

<t>(generated through instance-2 merged with template-1 expansion)</t>

<figure><artwork><![CDATA[
  <data>
    <list-a>
      <name>templ-1-list-a-entry-1</name>
      <parm-x>1</parm-x>
      <parm-y>30</parm-y>
    </list-a>
    <list-a>
      <name>templ-1-list-a-entry-2</name>
      <parm-x>3</parm-x>       
      <parm-y>30</parm-y>
    </list-a>
     <list-a>
      <name>templ-1-list-a-entry-3</name>
      <parm-x>3</parm-x>
      <parm-y>50</parm-y>
    </list-a>
    <list-b>
      <name>templ-1-list-b-entry-1</name>
      <parm-t>2</parm-t>
      <parm-u>40</parm-u>
    </list-b>
    <list-b>
      <name>templ-1-list-b-entry-2</name>
      <parm-t>4</parm-t>
      <parm-u>60</parm-u>
    </list-b>
    <list-b>
      <name>templ-1-list-b-entry-3</name>
      <parm-t>4</parm-t>
      <parm-u>80</parm-u>
    </list-b>
  </data>
]]></artwork></figure>

<t>(generated through instance-3 merged with template-1 expansion)</t>

<figure><artwork><![CDATA[
  <data>
    <list-a>
      <name>templ-1-list-a-entry-1</name>
      <parm-x>1</parm-x>
      <parm-y>30</parm-y>
    </list-a>
    <list-a>
      <name>templ-1-list-a-entry-2</name>
      <parm-x>3</parm-x>       
      <parm-y>30</parm-y>
    </list-a>
     <list-a>
      <name>templ-1-list-a-entry-3</name>
      <parm-x>3</parm-x>
      <parm-y>55</parm-y>     <!-- needed to depart from template value-->
    </list-a>
    <list-b>
      <name>templ-1-list-b-entry-1</name>
      <parm-t>2</parm-t>
      <parm-u>40</parm-u>
    </list-b>
    <list-b>
      <name>templ-1-list-b-entry-2</name>
      <parm-t>4</parm-t>
      <parm-u>60</parm-u>
    </list-b>
    <list-b>
      <name>templ-1-list-b-entry-3</name>
      <parm-t>4</parm-t>
      <parm-u>88</parm-u>     <!--needed to depart from template value -->
    </list-b>
  </data>
]]></artwork></figure>

</section>
</section>
<section anchor="appendix-b-using-existing-yang-constructs-in-template-and-instance-yang-definition"><name>Appendix B. Using existing yang constructs in template and instance YANG definition</name>

<t>This appendix illustrates the use of groupings in the YANG definition of template and instances and more specifically it shows how easily mandatory and default statements can be introduced in the template definition by ‘refining’ the grouping ‘use’ statement.</t>

<section anchor="the-grouping-construct"><name>The ‘grouping’ construct</name>

<t>By defining common structures using grouping, one avoids repeating code, ensures consistency and makes future changes easier since modifications only need to happen in one place.</t>

<t>Example:</t>

<figure><artwork><![CDATA[
 grouping interface-config {
 leaf parm-a {
   type string;
 }
 leaf parm-b {
   type boolean;
 }
 leaf parm-c {
   type unint32;
 }
]]></artwork></figure>

<t>}
This ‘interface-config’ grouping defines a common structure that can be reused across different YANG modules or different parts of the same module.</t>

</section>
<section anchor="the-uses-statement"><name>The ‘uses’ statement</name>

<t>The ‘uses’ statement applies a previously defined grouping where needed in the model (e.g. it copies the data nodes of the grouping at the place of the ‘use’ statement’.</t>

<t>As an example, the data nodes defined in the grouping above can be used in the template and in the instance definition:</t>

<figure><artwork><![CDATA[
 container data-nodes-pattern {
 list template {
  key “name”;
  leaf name {
    type string;
  }
  container data {
    list interface {
      key "interface-name";
      leaf name {
        type string;
      }
      uses interface-config;
    } 
   } 
  }
list instance {
  key “name”;
  leaf name {
    type string;
  }
  container data {
    list interface {
      key "interface-name";
      leaf name {
        type string;
      }
      uses interface-config;
    }
   }
  }
 }
]]></artwork></figure>

</section>
<section anchor="the-refine-statement-to-control-default-and-mandatory-statements"><name>The ‘refine’ statement to control default and mandatory statements</name>

<t>As explained in section 2.4, with the template method, some data nodes may need a default or mandatory statement when used for the template definition but should have no mandatory neither default statements when used for the instance definition.</t>

<t>The ‘refine’ statement available in existing YANG version easily allows to control mandatory and default statements when used along with the ‘uses’ statement.</t>

<t>Assume in our example that it is desired that ‘parm-b’ has a default statement and ‘parm-c’ has a mandatory statement when they are used for the template definition.</t>

<t>Then the YANG becomes:</t>

<figure><artwork><![CDATA[
 container data-nodes-pattern {
 list template {
  key “name”;
  leaf name {
    type string;
  }
  container data {
    list interface {
      key "interface-name";
      uses interface-config {
        refine parm-b {
          default “true”
        }
        refine parm-c {
          mandatory true
        }
      }
    }
  }
}
list instance {
  key “name”;
  leaf name {
    type string;
  }
  container data {
    list interface {
      key "interface-name";
      uses interface-config;
    }
  }
}   }
]]></artwork></figure>

</section>
</section>
</section>
<section anchor="conclusion"><name>Conclusion</name>

<t>Using templates in YANG allows to efficiently configure large amounts of similar data nodes while keeping the running data store size small. This is beneficial in term of device memory footprint, ease of configuration, configuration time and potentially YANG validation processing in the device. This draft explains some practicalities of the template method, including how to ensure that mandatory and default statements don’t jeopardize the effectiveness of the method.</t>

</section>
<section anchor="further-work"><name>Further Work</name>

<t>A follow up draft is planned which will address how the template method described in this draft could also be used considering data nodes already defined in existing standards.</t>

</section>
<section anchor="conventions-and-definitions"><name>Conventions and Definitions</name>

<t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<?line -18?>

</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<t>TODO Security</t>

</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<t>This document has no IANA actions.</t>

</section>


  </middle>

  <back>



    <references title='Normative References' anchor="sec-normative-references">



<reference anchor="RFC2119">
  <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author fullname="S. Bradner" initials="S." surname="Bradner"/>
    <date month="March" year="1997"/>
    <abstract>
      <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="2119"/>
  <seriesInfo name="DOI" value="10.17487/RFC2119"/>
</reference>
<reference anchor="RFC8174">
  <front>
    <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
    <author fullname="B. Leiba" initials="B." surname="Leiba"/>
    <date month="May" year="2017"/>
    <abstract>
      <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="8174"/>
  <seriesInfo name="DOI" value="10.17487/RFC8174"/>
</reference>



    </references>




<?line 555?>

<section numbered="false" anchor="acknowledgments"><name>Acknowledgments</name>

<t>TODO acknowledge.</t>

</section>


  </back>

<!-- ##markdown-source:
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
Rm/d4jLMVCTwSfI/HcHc5UtYAAA=

-->

</rfc>

