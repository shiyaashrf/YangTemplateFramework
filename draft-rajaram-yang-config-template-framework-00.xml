<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.19 (Ruby 3.0.2) -->
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-rajaram-yang-config-template-framework-00" category="info" consensus="true" submissionType="IETF" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.23.2 -->
  <front>
    <title abbrev="yang-template-framework">Populating a list of YANG data nodes using templates.</title>
    <seriesInfo name="Internet-Draft" value="draft-rajaram-yang-config-template-framework-00"/>
    <author fullname="Robert Peschi">
      <organization>Nokia</organization>
      <address>
        <postal>
          <city>Antwerp</city>
        </postal>
        <email>robert.peschi@nokia.com</email>
      </address>
    </author>
    <author fullname="Shiya Ashraf">
      <organization>Nokia</organization>
      <address>
        <postal>
          <city>Antwerp</city>
        </postal>
        <email>shiya.ashraf@nokia.com</email>
      </address>
    </author>
    <author fullname="Deepak Rajaram">
      <organization>Nokia</organization>
      <address>
        <postal>
          <city>Chennai</city>
        </postal>
        <email>deepak.rajaram@nokia.com</email>
      </address>
    </author>
    <date year="2024" month="October" day="17"/>
    <area>ops</area>
    <workgroup>netmod</workgroup>
    <keyword>templates</keyword>
    <keyword>profiles</keyword>
    <keyword>yang scalability</keyword>
    <abstract>
      <?line 67?>

<t>This document presents a modeling technique for configuring large size devices in a compact way, when the device contains many similar data node patterns.A device here refers to any such entity that acts as a netconf server. This is realized by instructing the device to locally generate repetitive patterns of data nodes from a master copy called 'template' that is configured in the device. This approach is both convenient and efficient, as it minimizes the size of the running data store and reduces network provisioning time. It leverages existing YANG specification features and can be implemented with standard, off-the-shelf tools.</t>
    </abstract>
    <note removeInRFC="true">
      <name>About This Document</name>
      <t>
        Status information for this document may be found at <eref target="https://datatracker.ietf.org/doc/draft-rajaram-yang-config-template-framework/"/>.
      </t>
      <t>
        Discussion of this document takes place on the
        netmod Working Group mailing list (<eref target="mailto:netmod@ietf.org"/>),
        which is archived at <eref target="https://mailarchive.ietf.org/arch/browse/netmod/"/>.
        Subscribe at <eref target="https://www.ietf.org/mailman/listinfo/netmod/"/>.
      </t>
    </note>
  </front>
  <middle>
    <?line 71?>

<section anchor="introduction">
      <name>Introduction</name>
      <t>This draft considers the case of a device that contains a functional entity, characterized by a well-defined data nodes pattern, that is massively replicated and where each replication instance needs individual configuration with only limited variation.</t>
      <t>Having a device manager that repetitively configures each data node for every functional instance can become complex and prone to errors. This approach may lead to issues, such as extended configuration times, increased memory usage on the device, and inefficient YANG validation processes due to the large size of the running data store. These challenges only intensify as the system scales.</t>
      <t>This draft proposes a technique to improve this, that is based on 'YANG templates' which results in a smaller running data store even when the device is very large.</t>
      <t>We will call a 'YANG template' the configuration of a functional entity that the device is instructed to replicate multiple times to generate copies of the entity. The technique that we address in this draft allows to generate copies with the same data node values as in the template with the possibility, though, to overrule some of these values on an individual copy basis.</t>
      <t>The general template technique detailed in this draft does not suffer from the drawbacks mentioned earlier where the device manager is explicitly configuring all device data nodes.</t>
      <t>This method is not aimed at becoming a standard itself. It is a YANG modeling technique that can be considered, where appropriate, by any implementor or standardization organization, when designing a YANG module for a specific purpose.For the sake of completeness, note that other IETF documents do mention already the use of YANG template concept for specific applications, for instance <eref target="https://datatracker.ietf.org/doc/draft-ietf-ccamp-optical-impairment-topology-yang/">draft-ietf-ccamp-optical-impairment-topology-yang</eref> and <eref target="https://datatracker.ietf.org/doc/html/rfc8795#section-5.9">RFC8795</eref>. However they don't provide full context about the method. This draft can help clarifying and formalizing in a generic framework how to define and use YANG templates.</t>
      <t>In the next sections we will elaborate on some of the constructs to apply the template technique and highlight how to mitigate some potential issues. More specifically,</t>
      <ul spacing="normal">
        <li>
          <t>How to define the template of a functional entity, how to instruct the device to replicate it(including per instance variations) and</t>
        </li>
        <li>
          <t>How the replication process takes place when expanding the template into functional entity instances configuration data nodes.</t>
        </li>
      </ul>
    </section>
    <section anchor="template-technique-framework">
      <name>Template technique framework</name>
      <section anchor="provisioning-the-running-data-store">
        <name>Provisioning the running data store</name>
        <t>This section outlines how the device's running data store is utilized to implement the template technique.</t>
        <t>In the YANG model of the device, many functional instances can be organized in a list. Since a template represents the typical configuration pattern of a functional instance, it is often necessary to choose between multiple templates for replication. 
For Example: 
The device may host various types of functional instances, each with its own specific data structure. Say, one template might define data nodes for a 'function-1' type, while another template could define nodes for a 'function-2' type.
For a given type of functional instance, different sets of values for the data nodes may be required. Say, a 'function-1' type might have templates for 'function-1-bronze-grade', 'function-1-silver-grade', and 'function-1-gold-grade' variants. As a result, multiple templates can also be organized into a list within the device's YANG model.</t>
        <t>Assume for example, that list-a and list-b data nodes need to be configured in the device. Traditionally, the tree structure will be as below:</t>
        <t>root</t>
        <artwork><![CDATA[
 +--(...)                     // out of scope
 +--rw data-nodes-pattern     // container for functional instances
    +--rw instance* [name]    // the list of functional instances 
       +--rw name             string-ascii64
       +--rw description?     string-ascii128
       +--rw data
          +--rw list-a [name] //e.g. a list of interfaces
          |  +--rw name
          |  +--rw parm-x
          |  +--rw parm-y
          +--rw list-b [name] //e.g. a list of hardware components
             +--rw name
             +--rw parm-t
             +--rw parm-u
]]></artwork>
        <t>In contrast, the YANG tree of a device using the template technique would appear as below:</t>
        <t>root</t>
        <artwork><![CDATA[
 +--(...)                     // out of scope
 +--rw data-nodes-pattern     // container for functional instances
    +--rw template* [name]    // the list of templates
    |  +--rw name             string-ascii64
    |  +--rw description?     string-ascii128
    |  +--rw data
    |     +--rw list-a [name] //e.g. a list of interfaces
    |     |  +--rw name
    |     |  +--rw parm-x 
    |     |  +--rw parm-y
    |     +--rw list-b [name] //e.g. a list of hardware components
    |        +--rw name
    |        +--rw parm-t
    |        +--rw parm-u
    +--rw instance* [name]    // the list of functional instances 
       +--rw name             string-ascii64
       +--rw description?     string-ascii128
       +--rw template?        -> /data-nodes-pattern/template/name
       +--rw data
       +--rw list-a [name] //e.g. a list of interfaces
       |  +--rw name
       |  +--rw parm-x  //overrule if present,or take it from template
       |  +--rw parm-y  //overrule if present,or take it from template
       +--rw list-b [name] //e.g. a list of hardware components
          +--rw name
          +--rw parm-t  //overrule if present,or take it from template
          +--rw parm-u  //overrule if present,or take it from template
]]></artwork>
        <t>Each entry in the template list encompasses the generic configuration data nodes that are needed for all the functional entities to be addressed by this template, as contained in the data container, in this example, data nodes of list-a and list-b. In practice, naturally, the more data nodes that can be replicated the more efficient the template technique will be.</t>
        <t>Each entry in the instance list represents a copy to be made of the data nodes pattern defined by the leaf-ref template, to create a functional entity instance. The data container contains all the data nodes needed to customize each copy of the template, by overruling one or the other data node value originating from the template(eg: parm-x,parm-y,parm-t,parm-u), or possibly to add to the copy one or the other data nodes not provided by the template.</t>
        <t>Although it is recommended that the same data nodes are defined in the data container of template and the data container of instance, only a limited number of such data nodes should be configured in the instance. This reflects the assumption that functional instances should have only limited variations from their template model.</t>
        <t>It should be noted that in a good application of the template technique, only few templates would suffice to generate a very large number of functional instances; in other words, the instance list would be much larger, typically by order of magnitudes, than the template list.</t>
        <t>A simple configuration example in the running data store of the device can be found at <xref target="a1device-running-data-store-using-the-template-mechanism">Appendix A.1</xref></t>
      </section>
      <section anchor="device-expanding-the-running-data-store">
        <name>Device expanding the running data store</name>
        <t>Once the configuration is applied to the device, the device will dynamically create each instance as specified.
The process for generating data nodes for a particular instance follows these steps:</t>
        <t>-A copy of the template's data nodes is made, serving as the foundation for the instance's configuration.</t>
        <t>-If any of these data nodes are also configured in the running data store for this instance, they will override the template values.</t>
        <t>If an instance data node is configured in the running data store but not provided by the template, it will be added to the generated instance configuration.</t>
        <t>The resulting instance expansion corresponding to the example in appendix A.1 is provided in <xref target="a2data-generated-by-the-template-mechanism">Appendix A.2</xref></t>
      </section>
      <section anchor="mandatories-and-defaults">
        <name>Mandatories and Defaults</name>
        <t>While conceptually, the idea of templates improves the re-usability and consistency factor, there are certain nuances, which need to be addressed while handling data nodes with defaults and mandatories.</t>
        <t>If certain replicable data patterns contain default or mandatory values, and are used as-is both in the template and in the instance, 
-there is a possibility of silent and unintentional overwriting the configured value of the node in the template with the default value in the instance due to the merge operation.
-Mandatory data nodes must be unconditionally configured in the instance although they are already configured in the template, reducing the efficiency of the template mechanism.</t>
        <t>Hence, while the same data nodes are used in the templates and instances, it is imperative that instance data nodes are without default and mandatory statements.</t>
        <t>there may be different implementation to solve this, one such way which uses the existing yang constructs is provided in <xref target="b-using-existing-yang-constructs-in-template-and-instance-yang-definition">Appendix B</xref>.</t>
      </section>
    </section>
    <section anchor="benefits-of-templates-in-yang-design">
      <name>Benefits of Templates in YANG Design</name>
      <ol spacing="normal" type="1"><li>
          <t>Reusability:
Templates encourage reusability by allowing common structures to be defined once and reused multiple times. This reduces duplication and simplifies model management.</t>
        </li>
        <li>
          <t>Consistency:
By using templates, similar configurations are defined and applied uniformly, leading to more consistent data modeling and network configuration management.</t>
        </li>
        <li>
          <t>Simplified Maintenance:
When a template is modified, all places where it is used will automatically reflect those changes, reducing the effort required to maintain and update the model.</t>
        </li>
        <li>
          <t>Modularity:
Templates promote a modular approach to YANG model design. By splitting the model into reusable parts, it becomes easier to scale and extend.</t>
        </li>
      </ol>
    </section>
    <section anchor="appendix">
      <name>Appendix</name>
      <section anchor="a-example-of-applying-the-template-method">
        <name>A. Example of applying the template method.</name>
        <section anchor="a1device-running-data-store-using-the-template-mechanism">
          <name>A.1.Device running data store using the template mechanism</name>
          <t>In this example, one template template-1 is configured, and three instances are configured, to be derived from template-1 and with limited overruling of the template values.</t>
          <artwork><![CDATA[
 <config>
 <data-nodes-pattern>
 <template>
  <name>template-1</name>
  <description>A typical configuration</description>
  <data>
    <list-a>
      <name>templ-1-list-a-entry-1</name>
      <parm-x>1</parm-x>
      <parm-y>30</parm-y>
    </list-a>
    <list-a>
      <name>templ-1-list-a-entry-2</name>
      <parm-x>3</parm-x>
      <parm-y>30</parm-y>
    </list-a>
     <list-a>
      <name>templ-1-list-a-entry-3</name>
      <parm-x>3</parm-x>
      <parm-y>50</parm-y>
    </list-a>
    <list-b>
      <name>templ-1-list-b-entry-1</name>
      <parm-t>2</parm-t>
      <parm-u>40</parm-u>
    </list-b>
    <list-b>
      <name>templ-1-list-b-entry-2</name>
      <parm-t>4</parm-t>
      <parm-u>60</parm-u>
    </list-b>
    <list-b>
      <name>templ-1-list-b-entry-3</name>
      <parm-t>4</parm-t>
      <parm-u>80</parm-u>
    </list-b>
  </data>
</template>

<instance>                         // a first instance
  <name>instance-1</name>
  <template>template-1</template>  //config is derived from template-1
  <data>
    <list-a>
      <name>templ-1-list-a-entry-2</name> // inherited from template
      <parm-y>33</parm-y>      //overrule template value 30 with 33
    </list-a>
  </data>
</instance>

<instance>                         // a second instance
  <name>instance-2</name>
  <template>template-1</template> //config is derived from template-1
  <data>                   // nothing from template to be overruled
  </data>
</instance>

<instance>                        // a third instance
  <name>instance-3</name>
  <template>template-1</template> //config is derived from template-1
  <data>
    <list-a>
      <name>templ-1-list-a-entry-3</name> //inherited from template
      <parm-y>55</parm-y>      //overrule template value 50 with 55
    </list-a>
    <list-b>
      <name>templ-1-list-b-entry-3</name> //inherited from template
      <parm-u>88</parm-u>       //overrule template value 80 with 88
    </list-b>
  </data>
</instance>
 </data-nodes-pattern>
 </config>
]]></artwork>
        </section>
        <section anchor="a2data-generated-by-the-template-mechanism">
          <name>A2:Data generated by the template mechanism</name>
          <t>The running data store example in section A.1 leads the device to generate the following data used to control the instances (without the aid of the template mechanism, this data would need to explicitly come from the running data store, instead of being locally expanded):</t>
          <t>generated through instance-1 merged with template-1 expansion</t>
          <artwork><![CDATA[
  <data>
    <list-a>
      <name>templ-1-list-a-entry-1</name>
      <parm-x>1</parm-x>
      <parm-y>30</parm-y>
    </list-a>
    <list-a>
      <name>templ-1-list-a-entry-2</name>
      <parm-x>3</parm-x>       
      <parm-y>33</parm-y>     //deviate from template value
    </list-a>
     <list-a>
      <name>templ-1-list-a-entry-3</name>
      <parm-x>3</parm-x>
      <parm-y>50</parm-y>
    </list-a>
    <list-b>
      <name>templ-1-list-b-entry-1</name>
      <parm-t>2</parm-t>
      <parm-u>40</parm-u>
    </list-b>
    <list-b>
      <name>templ-1-list-b-entry-2</name>
      <parm-t>4</parm-t>
      <parm-u>60</parm-u>
    </list-b>
    <list-b>
      <name>templ-1-list-b-entry-3</name>
      <parm-t>4</parm-t>
      <parm-u>80</parm-u>
    </list-b>
  </data>
]]></artwork>
          <t>(generated through instance-2 merged with template-1 expansion)</t>
          <artwork><![CDATA[
  <data>
    <list-a>
      <name>templ-1-list-a-entry-1</name>
      <parm-x>1</parm-x>
      <parm-y>30</parm-y>
    </list-a>
    <list-a>
      <name>templ-1-list-a-entry-2</name>
      <parm-x>3</parm-x>       
      <parm-y>30</parm-y>
    </list-a>
     <list-a>
      <name>templ-1-list-a-entry-3</name>
      <parm-x>3</parm-x>
      <parm-y>50</parm-y>
    </list-a>
    <list-b>
      <name>templ-1-list-b-entry-1</name>
      <parm-t>2</parm-t>
      <parm-u>40</parm-u>
    </list-b>
    <list-b>
      <name>templ-1-list-b-entry-2</name>
      <parm-t>4</parm-t>
      <parm-u>60</parm-u>
    </list-b>
    <list-b>
      <name>templ-1-list-b-entry-3</name>
      <parm-t>4</parm-t>
      <parm-u>80</parm-u>
    </list-b>
  </data>
]]></artwork>
          <t>(generated through instance-3 merged with template-1 expansion)</t>
          <artwork><![CDATA[
  <data>
    <list-a>
      <name>templ-1-list-a-entry-1</name>
      <parm-x>1</parm-x>
      <parm-y>30</parm-y>
    </list-a>
    <list-a>
      <name>templ-1-list-a-entry-2</name>
      <parm-x>3</parm-x>       
      <parm-y>30</parm-y>
    </list-a>
     <list-a>
      <name>templ-1-list-a-entry-3</name>
      <parm-x>3</parm-x>
      <parm-y>55</parm-y>     //deviate from template value
    </list-a>
    <list-b>
      <name>templ-1-list-b-entry-1</name>
      <parm-t>2</parm-t>
      <parm-u>40</parm-u>
    </list-b>
    <list-b>
      <name>templ-1-list-b-entry-2</name>
      <parm-t>4</parm-t>
      <parm-u>60</parm-u>
    </list-b>
    <list-b>
      <name>templ-1-list-b-entry-3</name>
      <parm-t>4</parm-t>
      <parm-u>88</parm-u>     //deviate from template value
    </list-b>
  </data>
]]></artwork>
        </section>
      </section>
      <section anchor="b-using-existing-yang-constructs-in-template-and-instance-yang-definition">
        <name>B: Using existing yang constructs in template and instance YANG definition</name>
        <t>This appendix illustrates the use of groupings in the YANG definition of template and instances and more specifically it shows how easily mandatory and default statements can be introduced in the template definition by refining the grouping uses statement.</t>
        <section anchor="the-grouping-construct">
          <name>The grouping construct</name>
          <t>By defining common structures using grouping, one avoids repeating code, ensures consistency and makes future changes easier since modifications only need to happen in one place.</t>
          <t>Example:</t>
          <artwork><![CDATA[
 grouping interface-config {
 leaf parm-a {
   type string;
 }
 leaf parm-b {
   type boolean;
 }
 leaf parm-c {
   type unint32;
 }
]]></artwork>
          <t>}
This 'interface-config' grouping defines a common structure that can be reused across different YANG modules or different parts of the same module.</t>
        </section>
        <section anchor="the-uses-construct">
          <name>The uses construct</name>
          <t>The 'uses' statement applies a previously defined grouping where needed in the model (e.g. it copies the data nodes of the grouping at the place of the 'uses' statement.</t>
          <t>As an example, the data nodes defined in the grouping above can be used in the template and in the instance definition:</t>
          <artwork><![CDATA[
 container data-nodes-pattern {
 list template {
  key "name";
  leaf name {
    type string;
  }
  container data {
    list interface {
      key "interface-name";
      leaf name {
        type string;
      }
      uses interface-config;
    } 
   } 
  }
list instance {
  key "name";
  leaf name {
    type string;
  }
  container data {
    list interface {
      key "interface-name";
      leaf name {
        type string;
      }
      uses interface-config;
    }
   }
  }
 }
]]></artwork>
        </section>
        <section anchor="the-refine-construct-to-control-default-and-mandatory-statements">
          <name>The refine construct to control default and mandatory statements</name>
          <t>As explained in section 2.3, with the template method, some data nodes may need a default or mandatory statement when used for the template definition but should have no mandatory neither default statements when used for the instance definition.</t>
          <t>The refine statement available in existing YANG version easily allows to control mandatory and default statements when used along with the uses statement.</t>
          <t>Assume in our example that it is desired that parm-b has a default statement and parm-c has a mandatory statement when they are used for the template definition.</t>
          <t>Then the YANG becomes:</t>
          <artwork><![CDATA[
 container data-nodes-pattern {
 list template {
  key "name";
  leaf name {
    type string;
  }
  container data {
    list interface {
      key "interface-name";
      uses interface-config {
        refine parm-b {
          default "true"
        }
        refine parm-c {
          mandatory true
        }
      }
    }
  }
}
list instance {
  key "name";
  leaf name {
    type string;
  }
  container data {
    list interface {
      key "interface-name";
      uses interface-config;
    }
  }
}    }
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="conclusion">
      <name>Conclusion</name>
      <t>Using templates in YANG allows to efficiently configure large amounts of similar data nodes while keeping the running data store size small. This is beneficial in term of device memory footprint, ease of configuration, configuration time and potentially YANG validation processing in the device. This draft explains some practicalities of the template method, including how to ensure that mandatory and default statements do not jeopardize the effectiveness of the method.</t>
    </section>
    <section anchor="conventions-and-definitions">
      <name>Conventions and Definitions</name>
      <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>
      <?line -18?>

</section>
    <section anchor="security-considerations">
      <name>Security Considerations</name>
      <t>TODO Security</t>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <t>This document has no IANA actions.</t>
    </section>
  </middle>
  <back>
    <references anchor="sec-normative-references">
      <name>Normative References</name>
      <reference anchor="RFC2119">
        <front>
          <title>Key words for use in RFCs to Indicate Requirement Levels</title>
          <author fullname="S. Bradner" initials="S." surname="Bradner"/>
          <date month="March" year="1997"/>
          <abstract>
            <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
          </abstract>
        </front>
        <seriesInfo name="BCP" value="14"/>
        <seriesInfo name="RFC" value="2119"/>
        <seriesInfo name="DOI" value="10.17487/RFC2119"/>
      </reference>
      <reference anchor="RFC8174">
        <front>
          <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
          <author fullname="B. Leiba" initials="B." surname="Leiba"/>
          <date month="May" year="2017"/>
          <abstract>
            <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
          </abstract>
        </front>
        <seriesInfo name="BCP" value="14"/>
        <seriesInfo name="RFC" value="8174"/>
        <seriesInfo name="DOI" value="10.17487/RFC8174"/>
      </reference>
    </references>
    <?line 546?>

<section numbered="false" anchor="acknowledgments">
      <name>Acknowledgments</name>
      <t>TODO acknowledge.</t>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+1c6XLcOJL+rwi/A7b0Q/Zssaol2TNutVc9smWPFeFrbXf0
dnT0DxSJUmFEEjUEqXJ1W++yz7JPtnkAIMhiSZbbOzEza/dhiQeQyOPLRGYS
SZLc2dnd3YX/ibOyVlWp6uS0kvNavJTVRWZWpXivimUuawXP4GNvVSkLJeqF
tmKucyXmlSlEhu8ktclMsjZNhY8ky8rUJjX5pMhEbcS5qoWtZVWrbIID8TQ0
2NxUhawFjDjigR75QY6TRytTXZxXplnCz3QJxhtNHDXPTCV0qWstc2FV3SzH
Al4VpszXolSKJlaZroFemEZXthaz3KQXwszhV5Vnlmh5jc+Pal3nakTvWXxx
pkS6kOW5yr4TmcpVrcRIzmaVuhwJPceJKkHvIOV2YaqaBjsp18LAfJVIDfC0
rEUqSxwMCVHZWMyamsaWlZo3uShNjbPpsq5M1qTwXFWZigl7Z5A9RKhY6TzH
92CdQja1AZbpVOZAedZUujxnBiBlMPlawOiiKd0CPL9OTbkHjC7TvMlgNck3
34wEsHCUoIRtDesqHatykjMR8ULOVG7DLRCW+AQxuSGZDguimK1xMByiNiYn
DgMDgE3wA15Nm6pCbl2qympTfgfrARIzk+JwI5xXqA8SlFH51bxHJaydfuIk
VlxUskC1Tap5eiQWdb20R9Ppua4XzWySmmKaypmZxk/hQD+BzqCQKgVDpYrI
AVJ0xZxw0hZLpleKTM/hBySWVZfY9IRYHdgHxILwcSW4QHgoXQT+gbLfnXwo
clrUf718MRaqTieTyT1eGBrknR1SrSMxemOWDSwQJSxFroGloLw/nbz6i8hk
LUF9Mlh3Y/G+54WdjO7ssKrCAGugK/G3kjmsXaG04JEULpyban0Ewp0bnNSx
+8hJuJJ/lfB8QkOAOs/10EigRnd2bDMrtMX11uslDHD29P0zIXaFzK0BInSZ
qaWC/5X1aCxGaAumArPFX85OHsNfqIdnb98/A7rKppip6gjIgXngL5jZAi8b
eyTqqgEogmUdwgorJY+EWdo7O0H9jsB+68Jkd3Yu1BquZvC6SFrO0G8ATSgi
/gXXJixYkpzpXNegpZeqbHBaIXpDCsFr+xFmQ37/BW/j5ULq3D/2Z63q+cRU
53hDVumi1UN8DK/oSzXxT03xwnRWmZVVUx5hipKA5TU1gArRj0MJAWiRs3Te
GuBPLd4oC4PxTRhKlvpXUBRTHolX5kJLvpHCmo4AleqVqpZ8STG9FY0yWdIo
fy7xFbSRoQnfLfRaihO7ALX47PksDjKRNMj1050qtZQX4i2r3ydN+GShylLq
zoQZDTNxWhxPWZIVghyOkNOo/fHvd3aSJBFyZutKpjX+TlADxtEUaPUABKCP
tQWDBHGpnG0vXZT6bw1ZuGBbYVwGkQMuWP2rAoIudaoISyU8UyxheLGS67FY
AfmED/wI+Q6pSwuqBf7E6gI1p7V4sZQ1+ms7OfFvgMdRjKiErfRaA6CDQFav
YWxAHZgOiEa6QdOQRgDZCgB3wlgK/4JJ5UApwjVQCQxoUoKeiDQYHHwoeZ5z
VaoKwReQU8E0wMBAGcJUhFAUJwC/pK3JNS7XAseAmfa8ce4xkUCFZx/c1TFb
HJ1yCRYsYW3w8wx8LT4PRqtRNrLMhJrPdYq/jXGx4P4LCBIKWJalsUgUhvyk
qJqyxPURpRYwSdEIMHODggI2IbQgYlxqBDfihQbPKM5qkSvgnTyH59QHAGa8
R8BslyrVQALpqpgrWcNSLA3sYgGNfgx1CVa4Au+EoVGZyQrCAzOfJ0BZYhcq
n7OvnHiVLHSW5Qp/o4CNAgaco1VRiqoQL3VGioCOVVpargwCRC4HBZNgdyWN
AkEUK8sYAx9UfVV5XZBipfI8ydRcl3AlEqyT9zgID0RsQRFAPdCfIhfgBVz7
ilRUoeD8HeQPqpksgS6OvMBT6EudNUCNVwN+jvhEoV0OwsRBLyW4ELw3EciB
5/KSvaRbJ5gOCKdiwloNhQGCflkmp7UrCjNAquuYK4FCll6KURlab64+0MJA
O0qyCxe69bS0kECykhSNgotslB2zaUrLUUIGa+muFVUMnoJIDQwSo6dCFeCo
wc/DioSJbWJMJIBUvNKzDl6CHWc8GJABuozhUdYoH25FqLTVFHAhgHSoDWCp
JSo68V+XFNrM17gCsqg1WHVBXlSxtkbaCNMvDc4uI5BEVhRoVbyXaLVnRssF
qvdoGcFx74H6aNIc2+S1g1BbIGHVkBWDEMsNVIXxSba0eFaaHxVH1ghGMGJ3
1j02oI5oyJI2TIbp707l8ZP3IcEYRAEL0KA8LGXeHDkcBVzUynqJ8NAkhZh1
ONMKcCrLgBkuMA/chmVAKDE0KNkPSQs3Xa3Kg6Y0ityCw9oQUoc3QH5Wc3iE
kjLN+WKMU4D4qqqBlVg0CabahhGBWbLs2jOgPghYW+Y9roupzNtJ24VmChAq
9z4grDAzCMywa7INhuHsWYjzlVzNZHoBEIScMwhUSla5hocYeyL5eHDQaIMo
GQi31x2/jQrhHm7hzhOOOKeAExkOgMRIkCXAXM34wDjkQR1ckAUwJ5+BwMAW
OhA6MDKzi/AgjltGpp4AZYmQB0aPmAwuPjgSwC3418/o4qRO0OSCDFiEPi+Z
QE8HihCRTwbXJZZNhVY7wS02K80FSZhxD+wfVG+MK3dU85aXon4fJ2HE5EUB
3AQky9Y0VsMOqWNquN5ULWlL1VIBS/Z+Amab03bfYfHPvEXBODpJU9gYJmZJ
O+IEeCJ1hRMnNUBPbs7XtIP55a4PxFGeGNtdQOgTAnEge3rrMaf3CH5/fvvs
ycM/ffvgE6ZY1EU+hY0nPr5rFcFI8mDy7b2JeG5W6Ht4A5/RXp0CD/RLTZ5z
QuED6NrMNAw2rIPO4TjnD+oDocNSpIBygNEkaSCRQlyI7fB3Ak+yPOBx2MeJ
hVmhVbOTp5dQUl0cJnQ/Y6AokRi3BIuQREiqYCdlCHhA7BEwkEYTIHKACqJd
d/GmNQSce6HPFzn8V3u6wOnrc3yOBl0aTK5g5od96kS8RNwPsRfEp2OKm5Ct
0bI6Mw6D+djP6BG8F/62UK7ru5xNQa4uVaSeITaxpCERJQvVCX+cdxY1GBhE
U5SAIEMFWIIXffAdSAbnawb8j5/Y9txVBF28tdkNKb14z+J1gJ7YFW868e5g
cBBw0CmAAJ0EOAMCFm6VzLA9O+Se4b2m1rzV4FiAYWyLQsRa14KnVywfCNFe
aSBusx5THRyyS+FsykS80ygv2c4K0vEbPKJmvUR16vHVhb0bGuTnHOO+Q6Mr
BzUFS0EZSwg9YLHpwgCyAj2wRYZ7bTjgbYyALtIRdDqIw085/3Uk2HUGT7YG
ltuaVM40lpIUFEMMsWLMES+5dnBLAnO8AW6dgFDlGwz/3uHWlGJbz5uCDNKZ
Ury9I++x52dM9veIDPQ5mAyTJfuHCO2bPPPjDA9xwENMeO2AVxpDOry0ZW3j
KDFnVU0scKHI3HmxiGJk2wyF/bdGg5N1ix1Yg1vzQl72RRQ9msxgD/CrSs4r
mam9ceeW1TmgeriF2BbfPjd55m4yaoDiTcQJxgkc7I6HVAQ1GnNrfbVGZOU0
IYq4s3sGS2xthwOZE4DOQsXJVReJ4wiJJFrpx1nMOp9an6nrduqwIs0Syilq
BOorpVr1ChltiDxnCqJWyr1UxlDGBdM44t+T5C7mRcXQn+kUIQeFbCGwVO0r
1YqITYjYxBuqe8XtezFuhEUPWYgbKIzlb/xB/IzZqV/cQLSJcunYQcxpxwlD
Ubkj/gPMAGBMpE21/uP9gTdgBWmllzj49xtv7B88HHoF1t65HO44obplTKdq
cj6Jksq4ravmssMC/vMxXsDWm0tZFcmH62+vr6FstpWyBYS0K6wkYPQJeAQW
0h9HXEei6NBQX3+7cb4GNaWSth63XocUOE6luLz7cBCzIoyDOAc2If/oSu7J
v0bJ4xz6kF506N6m2B9vr9gfhxX7Y199bqfYHzcXsPUmK7a4/v76GtI+U7M/
dmU0RKPYptlDt5t/dmjzKvi9v5wci+mmGUz9c9MNMNgCkb8HH7eDY1+BYMiQ
MdFzX0YYY2yCu2sIGDmXEUruW8da/66xvhTmbgfcWCd/F6ndsZrbj4X/PJVc
B6nWGykuWq0qqRZDKdLa56QgHN62k3LFlIpT1irj0BWCGSrw9rZmWvluApew
44R6HRevqU7hQbuNpHDCAOXjkAYLkVpEEQhsI2SbiDPcXkogB4PjEssQbTBW
4Dasvya3T4oS9+HRNr+8zd1xODcZ5njYGBPHoy2W5LQgs6iAKDjs6jZqDMKX
H2acOMiVnCeVmkd8xO1VpZCwoSStJ4JTql3+RhURJ8lexMsxb9rABhZrSbyP
ItodwS0VQJ/TUgwPcAPl9h+8C+rlXuGmPtcl1/hDNtOPdledHzkAGbPt8181
/9Xco9I5Z2hz4iPoWWiqIPK2zs+pS5djCmz1M7stQs4JX7efrTC9WXDNIuS8
uxllS6bhZTWozHE8QRo7/Ei7s6O6gwyVH+4QoLCoies31IiDUdfg1iQWPy1l
nqvU7fIl7oSWXHzBZQ36PTc4bQWHK1E2CFBHu91ox3VWRyRi+tSxkVNyxmRx
zrOvWa21OY7M1SraE3LAiWlxl6gKJQAZ1T0i5g0t8jskhfUE+yfseMB8V34B
BXKfRgV8cokSIAv1v8p4jkKel7puMsVFngH8dXqGVW7c43ZR14GdF+FAKqmT
BPIINjdNSen4n0+W2HeiP4iTyf4vd3flPj+YuJESCh9opISieSq+hiaXQmEL
lbbFPZc92xWnPFE3PTecH3tdum6i7pq4OJhrFezUZ7CihRCcZmvwro6pDtcI
doI4wG+47A11eSGs+YQiOiWnAIGyONMC8AGOocG+gjDc3LjyEdVxbK2WljYs
yckg0u3ZeFiq/WawCmwqoLSzdS1PIAtXC3c45Cfc66UrudJ9NqfaRqgn9ZCF
0h6b1j2gGjydK8UxkFBunXhLCI259Y5CcsKI841zrl853rSoPdihMDA9dvpd
B7CUIwxZkCxr9cEbbhbVnjf49J4yyZgh4py+e5AUkxrPUlPBfQjeWE156Mig
ZGQauKhAJ9yL7eYA7eaADCUQlszW11sK2cpLLEdhp5drfzhVc4nlW6q8UmbQ
lX2aNjABCmRnv+krxdblzsFOXa8Wt1RgoQxUtUwBDyHYMRWNg4qC0auq0J8A
6Ln0J5eRoxRWG5ZxrhJWkeU9i6F0aeaIp1mLdmVeWfxULnqa5U5nQkeM821+
IHTKfpi1UzxOD4amSWkT3+PSj1y56t+xpjEAacJLpzJjVLYlV4ldndwh05RU
w3fYj5awqnRo9ImU2wUobPas/NuKxH5V/Eo/7ItaDwqFXsgsVdDl5GVgQ5yh
bSx1yoKTQhX2ucRrHDtAgwtWQg+srztuvtRaIXX7+MX7ODfdQDsRVJwk/lwR
y1lptkVBJMXehNbJLmTkObICLSeOXCofEfSBh4dEhmNOyPM71sY1VoBrqqSw
WrI2uFx3mx4P9RbXbmKENXnoxcCAkeKqFbzH9tL4vVHodKK+yaiktxU/HgN6
zJxv9W+HjlL3dqLLFklgLYlfPD9IsSQpwL1QxXoMSDTXnOV/30JFyZm6U6py
45P7E/FWBcSgts7oedz6NdjDBUrQwgoW19ERalpiUWAh06et/W7Ox7eG9I56
xkjY3e6OEGpyP1nWtLEdvkMhDzpv6ypa3JaAkoGFHkzEkxbcmPTH636z7zi0
B3ZcRDcKJ1RxMQcYPxaDEW+xLcn5BtrkBSytWetCjwK+75vhusFMh+JDLKe5
JWWA/oQyKEcm/kesa0aVNk3LpofHtO2i8qd1/Q5sFsRUcpLdrncXvWM7ivWd
+nbTlk1VhxoPd2JrBmGCwWVGUfXCh+h3du5jHTnDqGhAW0DBC0PhdMHPtE1e
MHRUmOQmiwlKywI36gCtfJvKNKxwuaJAjFGAe8uwKc1q7oynlipuaqROsQlR
BPofzIs97cnEVwcpP4219Y3MtGsW4Bfgjf2JC2UHQpeBxHZAv1CLjXMRnSph
MOX9bqw0dns9TKO3uypOMrXPePuqAAqzbj4HBqROQvQ5fu8V77R7gB0Fc5RK
esTTHPtfN1OH4ZYfw18Q/FlDS8gjSi62t6N05vHJcNH40TR+qH0TqDhus16P
OJFzHOfBosmT/YQfSCi/skEIPc75gmO4537avLs+PvzG3V7Hs083pr8lQQfX
EHT4RQi6LUWHn03Rg1uxaHYTQbMbZVYfH7gZ64G7zfF9T1CzSdDs8wnaLrP6
+P61BP3x/4ag7SK7iaCHn0TQo2lkdY+mkbW7Sx6ejsW2P9Mp5hjpozL/cBcr
QgyzgRVhuhhOwkUcmnED0XMLDn4h9PCCx9XoEtwuQerWfHyw1MNgF54ZIS3f
RV9x+A3D9eHhNRbUE0dg/m3FYRVuFW6SR1/bb5LHrcUxTB72wLQp3uAruYXD
cS/7chwhhsCM1Y386BvbF+fHZ6vnYauet9DOBw8+WTsfOO188OBL4vvnkA3I
9TAgVxDhNrofOrofPvx0kIt0KLq9Jf6ZhlCJo8WDo1OMDtvEVC+X1Q0P3w8n
xKLck+8axNQT7kJsr8cypK45g+h3YzQYbQlqwx0aJu+kAKy46zfIlNbX2fZt
/Ni1leOYnNIOHw3HLeGFaqsym4sa09T4eQfMM1P0xZf7PIpTxCq7RznUiHcQ
AXNJJXgIToq4yDaKdttkHgzw/ztidDc+xR1Np6hIKOsu1pLtfA0tv4aWf5fQ
8s7O3WtM/uBGk78X9q1fLf5z6fpqz1/t+e9jz4df7flfy54ffKmY4qvF/+NY
fG+LdTuhDmICbo8eH4kfKGG+vTpW9iu3rrjHJ7mE+lb7eWkozus8b/AkitpV
4NzXk3Q2CUwVPtvtj9RvsYoS7lgx7H8sh/UHu8DmD/x+CysQcK2tK+I7vuLY
1hjDeQb+9KKNYmdM0YyqNjp8VOaXwNXFMKov8e3uUpteeCqwE+8+XruRB0t0
XL7wb3J1Ql4anVk6CIA7YlKDzSp4sEzFn82FNgIuqeL3ePOGPlVx5SVfmLH0
yRiXrtzXqd1DpxYkPeqkgpmpqsVdTuEbrnY7F9YX+ovdUTviN/cE9jlyC6AM
1/gsGtcz/Z27eLXxwqz/wswYuFtufyPtv0G9AocH0Rv005XT070+2Xvtirj6
yD2eXRH12k252SGtjLVRlTr6PNlis0R7h0pmfmNPdXd+bEJs9ZpDatXRGry6
h5f3WnVzdVFqmKgADUxj83UonIa1cE3SNYI6Jedq3l3qnNa1/9C+1zvqqAwD
uZ5J/tLT3ezT5L/Owgak6MOszri9Bst2/BmequBYO9R/MNQ6EpnpUQhT2l7M
gU9NgnJiQ2AYOujOhVqLER3d5RWHdYy+E2g1bEiLg1L2CIhfo1mD5sV33NSt
VnaJ2ErINmI6BOEf0qq+0kePX7UBTvujG8GR7Xj+lVnRw1f9BV113UDF34oG
c44TgDe1wjhjwqxe6LD3CciDyeG4bWLqFcvH/K1577NRQnk53MbVwgp9xE32
57seB31iU3faiksTDVYqzQ3bm453c/QBU26P2XDci0DvEg8jm3Eytnt8kTuB
z8cA7Ykint03RgUtcTI3iJ2evT1HH3+Dir6yCZ+huhaomksMlrs38JLzags6
xWpjaj6Oh90YP7JVMqFD7CYRBSZGYZZr1PjXh8pB++0jgVOujYDD/fFSGuHh
faPu3avtI6WbI7XC5HMAt450NYAw7od/XiT+ZCztrPSK2+WeGDynwrrDwn7o
tpCFtrnW1sPnPnHDpfuAQBamKTn+2jiZzrqGyAulltub4/ngKTq+qT17bkYd
fSkd6YHbpaqgM+TcKQd8ANbcmHoJXK/xHAPrTqSJWmzGAwdpMSj440JgPVsO
yHIno3Q+Ym/PVXHOw7rTR/izKhijjg5s2vAe7eEg7kQR3m0wlN0Io5mh9vG/
KrOkM32Ub2pD13VJR/D4mf1BML478gmdiOf6ALnx2sGZ9S4B9Y2+8BCjlz+8
e48nceLf4tVr+vnt0//84ezt01P8+d3zkxcvwg877ol3z1//8OK0/al988nr
ly+fvjrll+Gq6FzaGb08+WnEvWCj12/en71+dfJi1J7y5I9ZRHDm6jgpPQTn
dJKc3eEuqhn78cdP3vzPf+/fF7/99m9vnz052N//9urK/fJw/0/34ReEe56N
9mj8K8L/jvs2G7sB6Qiwpa5lbulrPNwKl3So4mRn5w8/I2d+ORKPZuly//6x
u4AL7lz0POtcJJ5tXtl4mZk4cGlgmsDNzvUep7v0nvzU+d3zPbr46Hs8v0Uk
+w+/P/Yt/OKdShtsheRO1Mz1bLMSvT59He77589OXp0MPduRLLpmCHToWcnH
B03agzfxDC8e7CS9KM0qV9m5C+N+O+KPl1T2H6M5iEqNrgIlMjysJv4TBPzn
fwGjb1QX5loAAA==

-->

</rfc>
