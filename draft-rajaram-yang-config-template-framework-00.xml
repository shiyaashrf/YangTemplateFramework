<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE rfc [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">
]>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.19 (Ruby 3.0.2) -->
<rfc xmlns:xi="http://www.w3.org/2001/XInclude" ipr="trust200902" docName="draft-rajaram-yang-config-template-framework-00" category="info" consensus="true" submissionType="IETF" tocInclude="true" sortRefs="true" symRefs="true" version="3">
  <!-- xml2rfc v2v3 conversion 3.23.2 -->
  <front>
    <title abbrev="yang-template-framework">Populating a list of YANG data nodes using templates.</title>
    <seriesInfo name="Internet-Draft" value="draft-rajaram-yang-config-template-framework-00"/>
    <author fullname="Robert Peschi">
      <organization>Nokia</organization>
      <address>
        <postal>
          <city>Antwerp</city>
        </postal>
        <email>robert.peschi@nokia.com</email>
      </address>
    </author>
    <author fullname="Shiya Ashraf">
      <organization>Nokia</organization>
      <address>
        <postal>
          <city>Antwerp</city>
        </postal>
        <email>shiya.ashraf@nokia.com</email>
      </address>
    </author>
    <author fullname="Deepak Rajaram">
      <organization>Nokia</organization>
      <address>
        <postal>
          <city>Chennai</city>
        </postal>
        <email>deepak.rajaram@nokia.com</email>
      </address>
    </author>
    <date year="2024" month="October" day="17"/>
    <area>ops</area>
    <workgroup>netmod</workgroup>
    <keyword>templates</keyword>
    <keyword>profiles</keyword>
    <keyword>yang scalability</keyword>
    <abstract>
      <?line 67?>

<t>This document presents a modeling technique for configuring large size devices in a compact way, when the device contains many similar data node patterns.A device here refers to any such entity that acts as a netconf server. This is realized by instructing the device to locally generate repetitive patterns of data nodes from a master copy called 'template' that is configured in the device. This approach is both convenient and efficient, as it minimizes the size of the running data store and reduces network provisioning time. It leverages existing YANG specification features and can be implemented with standard, off-the-shelf tools.</t>
    </abstract>
    <note removeInRFC="true">
      <name>About This Document</name>
      <t>
        Status information for this document may be found at <eref target="https://datatracker.ietf.org/doc/draft-rajaram-yang-config-template-framework/"/>.
      </t>
      <t>
        Discussion of this document takes place on the
        netmod Working Group mailing list (<eref target="mailto:netmod@ietf.org"/>),
        which is archived at <eref target="https://mailarchive.ietf.org/arch/browse/netmod/"/>.
        Subscribe at <eref target="https://www.ietf.org/mailman/listinfo/netmod/"/>.
      </t>
    </note>
  </front>
  <middle>
    <?line 71?>

<section anchor="introduction">
      <name>Introduction</name>
      <t>This draft considers the case of a device that contains a functional entity, characterized by a well-defined data nodes pattern, that is massively replicated and where each replication instance needs individual configuration with only limited variation.</t>
      <t>Having a device manager that repetitively configures each data node for every functional instance can become complex and prone to errors. This approach may lead to issues, such as extended configuration times, increased memory usage on the device, and inefficient YANG validation processes due to the large size of the running data store. These challenges only intensify as the system scales.</t>
      <t>This draft proposes a technique to improve this, that is based on 'YANG templates' which results in a smaller running data store even when the device is very large.</t>
      <t>We will call a 'YANG template' the configuration of a functional entity that the device is instructed to replicate multiple times to generate copies of the entity. The technique that we address in this draft allows to generate copies with the same data node values as in the template with the possibility, though, to overrule some of these values on an individual copy basis.</t>
      <t>The general template technique detailed in this draft does not suffer from the drawbacks mentioned earlier where the device manager is explicitly configuring all device data nodes.</t>
      <t>This method is not aimed at becoming a standard itself. It is a YANG modeling technique that can be considered, where appropriate, by any implementor or standardization organization, when designing a YANG module for a specific purpose.For the sake of completeness, note that other IETF documents do mention already the use of YANG template concept for specific applications, for instance <eref target="https://datatracker.ietf.org/doc/draft-ietf-ccamp-optical-impairment-topology-yang/">draft-ietf-ccamp-optical-impairment-topology-yang</eref> and <eref target="https://datatracker.ietf.org/doc/html/rfc8795#section-5.9">RFC8795</eref>. However they don't provide full context about the method. This draft can help clarifying and formalizing in a generic framework how to define and use YANG templates.</t>
      <t>In the next sections we will elaborate on some of the constructs to apply the template technique and highlight how to mitigate some potential issues. More specifically,</t>
      <ul spacing="normal">
        <li>
          <t>How to define the template of a functional entity, how to instruct the device to replicate it(including per instance variations) and</t>
        </li>
        <li>
          <t>How the replication process takes place when expanding the template into functional entity instances configuration data nodes.</t>
        </li>
      </ul>
    </section>
    <section anchor="template-technique-framework">
      <name>Template technique framework</name>
      <section anchor="provisioning-the-running-data-store">
        <name>Provisioning the running data store</name>
        <t>This section outlines how the device's running data store is utilized to implement the template technique.</t>
        <t>In the YANG model of the device, many functional instances can be organized in a list. Since a template represents the typical configuration pattern of a functional instance, it is often necessary to choose between multiple templates for replication. 
For Example: 
The device may host various types of functional instances, each with its own specific data structure. Say, one template might define data nodes for a 'function-1' type, while another template could define nodes for a 'function-2' type.
For a given type of functional instance, different sets of values for the data nodes may be required. Say, a 'function-1' type might have templates for 'function-1-bronze-grade', 'function-1-silver-grade', and 'function-1-gold-grade' variants. As a result, multiple templates can also be organized into a list within the device's YANG model.</t>
        <t>Assume for example, that list-a and list-b data nodes need to be configured in the device. Traditionally, the tree structure will be as below:</t>
        <t>root</t>
        <artwork><![CDATA[
 +--(...)                     // out of scope
 +--rw data-nodes-pattern     // container for functional instances
    +--rw instance* [name]    // the list of functional instances 
       +--rw name             string-ascii64
       +--rw description?     string-ascii128
       +--rw data
          +--rw list-a [name] //e.g. a list of interfaces
          |  +--rw name
          |  +--rw parm-x
          |  +--rw parm-y
          +--rw list-b [name] //e.g. a list of hardware components
             +--rw name
             +--rw parm-t
             +--rw parm-u
]]></artwork>
        <t>In contrast, the YANG tree of a device using the template technique would appear as below:</t>
        <t>root</t>
        <artwork><![CDATA[
 +--(...)                     // out of scope
 +--rw data-nodes-pattern     // container for functional instances
    +--rw template* [name]    // the list of templates
    |  +--rw name             string-ascii64
    |  +--rw description?     string-ascii128
    |  +--rw data
    |     +--rw list-a [name] //e.g. a list of interfaces
    |     |  +--rw name
    |     |  +--rw parm-x 
    |     |  +--rw parm-y
    |     +--rw list-b [name] //e.g. a list of hardware components
    |        +--rw name
    |        +--rw parm-t
    |        +--rw parm-u
    +--rw instance* [name]    // the list of functional instances 
       +--rw name             string-ascii64
       +--rw description?     string-ascii128
       +--rw template?        -> /data-nodes-pattern/template/name
       +--rw data
       +--rw list-a [name] //e.g. a list of interfaces
       |  +--rw name
       |  +--rw parm-x  //overrule if present,or take it from template
       |  +--rw parm-y  //overrule if present,or take it from template
       +--rw list-b [name] //e.g. a list of hardware components
          +--rw name
          +--rw parm-t  //overrule if present,or take it from template
          +--rw parm-u  //overrule if present,or take it from template
]]></artwork>
        <t>Each entry in the template list encompasses the generic configuration data nodes that are needed for all the functional entities to be addressed by this template, as contained in the data container, in this example, data nodes of list-a and list-b. In practice, naturally, the more data nodes that can be replicated the more efficient the template technique will be.</t>
        <t>Each entry in the instance list represents a copy to be made of the data nodes pattern defined by the leaf-ref template, to create a functional entity instance. The data container contains all the data nodes needed to customize each copy of the template, by overruling one or the other data node value originating from the template(eg: parm-x,parm-y,parm-t,parm-u), or possibly to add to the copy one or the other data nodes not provided by the template.</t>
        <t>Although it is recommended that the same data nodes are defined in the data container of template and the data container of instance, only a limited number of such data nodes should be configured in the instance. This reflects the assumption that functional instances should have only limited variations from their template model.</t>
        <t>It should be noted that in a good application of the template technique, only few templates would suffice to generate a very large number of functional instances; in other words, the instance list would be much larger, typically by order of magnitudes, than the template list.</t>
        <t>A simple configuration example in the running data store of the device can be found at <xref target="a1device-running-data-store-using-the-template-mechanism">Appendix A.1</xref></t>
      </section>
      <section anchor="device-expanding-the-running-data-store">
        <name>Device expanding the running data store</name>
        <t>Once the configuration is applied to the device, the device will dynamically create each instance as specified.
The process for generating data nodes for a particular instance follows these steps:</t>
        <t>-A copy of the template's data nodes is made, serving as the foundation for the instance's configuration.</t>
        <t>-If any of these data nodes are also configured in the running data store for this instance, they will override the template values.</t>
        <t>If an instance data node is configured in the running data store but not provided by the template, it will be added to the generated instance configuration.</t>
        <t>The resulting instance expansion corresponding to the example in appendix A.1 is provided in <xref target="a2data-generated-by-the-template-mechanism">Appendix A.2</xref></t>
      </section>
      <section anchor="mandatories-and-defaults">
        <name>Mandatories and Defaults</name>
        <t>While conceptually, the idea of templates improves the re-usability and consistency factor, there are certain nuances, which need to be addressed while handling data nodes with defaults and mandatories.</t>
        <t>If certain replicable data patterns contain default or mandatory values, and are used as-is both in the template and in the instance, 
-there is a possibility of silent and unintentional overwriting the configured value of the node in the template with the default value in the instance due to the merge operation.
-Mandatory data nodes must be unconditionally configured in the instance although they are already configured in the template, reducing the efficiency of the template mechanism.</t>
        <t>Hence, while the same data nodes are used in the templates and instances, it is imperative that instance data nodes are without default and mandatory statements.</t>
        <t>there may be different implementation to solve this, one such way which uses the existing yang constructs is provided in <xref target="b-using-existing-yang-constructs-in-template-and-instance-yang-definition">Appendix B</xref>.</t>
      </section>
    </section>
    <section anchor="benefits-of-templates-in-yang-design">
      <name>Benefits of Templates in YANG Design</name>
      <ol spacing="normal" type="1"><li>
          <t>Reusability:
Templates encourage reusability by allowing common structures to be defined once and reused multiple times. This reduces duplication and simplifies model management.</t>
        </li>
        <li>
          <t>Consistency:
By using templates, similar configurations are defined and applied uniformly, leading to more consistent data modeling and network configuration management.</t>
        </li>
        <li>
          <t>Simplified Maintenance:
When a template is modified, all places where it is used will automatically reflect those changes, reducing the effort required to maintain and update the model.</t>
        </li>
        <li>
          <t>Modularity:
Templates promote a modular approach to YANG model design. By splitting the model into reusable parts, it becomes easier to scale and extend.</t>
        </li>
      </ol>
    </section>
    <section anchor="appendix">
      <name>Appendix</name>
      <section anchor="a-example-of-applying-the-template-method">
        <name>A. Example of applying the template method.</name>
        <section anchor="a1device-running-data-store-using-the-template-mechanism">
          <name>A.1.Device running data store using the template mechanism</name>
          <t>In this example, one template template-1 is configured, and three instances are configured, to be derived from template-1 and with limited overruling of the template values.</t>
          <artwork><![CDATA[
 <config>
 <data-nodes-pattern>
 <template>
  <name>template-1</name>
  <description>A typical configuration</description>
  <data>
    <list-a>
      <name>templ-1-list-a-entry-1</name>
      <parm-x>1</parm-x>
      <parm-y>30</parm-y>
    </list-a>
    <list-a>
      <name>templ-1-list-a-entry-2</name>
      <parm-x>3</parm-x>
      <parm-y>30</parm-y>
    </list-a>
     <list-a>
      <name>templ-1-list-a-entry-3</name>
      <parm-x>3</parm-x>
      <parm-y>50</parm-y>
    </list-a>
    <list-b>
      <name>templ-1-list-b-entry-1</name>
      <parm-t>2</parm-t>
      <parm-u>40</parm-u>
    </list-b>
    <list-b>
      <name>templ-1-list-b-entry-2</name>
      <parm-t>4</parm-t>
      <parm-u>60</parm-u>
    </list-b>
    <list-b>
      <name>templ-1-list-b-entry-3</name>
      <parm-t>4</parm-t>
      <parm-u>80</parm-u>
    </list-b>
  </data>
</template>

<instance>                         // a first instance
  <name>instance-1</name>
  <template>template-1</template>  //config is derived from template-1
  <data>
    <list-a>
      <name>templ-1-list-a-entry-2</name> // inherited from template
      <parm-y>33</parm-y>      //overrule template value 30 with 33
    </list-a>
  </data>
</instance>

<instance>                         // a second instance
  <name>instance-2</name>
  <template>template-1</template> //config is derived from template-1
  <data>                   // nothing from template to be overruled
  </data>
</instance>

<instance>                        // a third instance
  <name>instance-3</name>
  <template>template-1</template> //config is derived from template-1
  <data>
    <list-a>
      <name>templ-1-list-a-entry-3</name> //inherited from template
      <parm-y>55</parm-y>      //overrule template value 50 with 55
    </list-a>
    <list-b>
      <name>templ-1-list-b-entry-3</name> //inherited from template
      <parm-u>88</parm-u>       //overrule template value 80 with 88
    </list-b>
  </data>
</instance>
 </data-nodes-pattern>
 </config>
]]></artwork>
        </section>
        <section anchor="a2data-generated-by-the-template-mechanism">
          <name>A2:Data generated by the template mechanism</name>
          <t>The running data store example in section A.1 leads the device to generate the following data used to control the instances (without the aid of the template mechanism, this data would need to explicitly come from the running data store, instead of being locally expanded):</t>
          <t>generated through instance-1 merged with template-1 expansion</t>
          <artwork><![CDATA[
  <data>
    <list-a>
      <name>templ-1-list-a-entry-1</name>
      <parm-x>1</parm-x>
      <parm-y>30</parm-y>
    </list-a>
    <list-a>
      <name>templ-1-list-a-entry-2</name>
      <parm-x>3</parm-x>       
      <parm-y>33</parm-y>     //deviate from template value
    </list-a>
     <list-a>
      <name>templ-1-list-a-entry-3</name>
      <parm-x>3</parm-x>
      <parm-y>50</parm-y>
    </list-a>
    <list-b>
      <name>templ-1-list-b-entry-1</name>
      <parm-t>2</parm-t>
      <parm-u>40</parm-u>
    </list-b>
    <list-b>
      <name>templ-1-list-b-entry-2</name>
      <parm-t>4</parm-t>
      <parm-u>60</parm-u>
    </list-b>
    <list-b>
      <name>templ-1-list-b-entry-3</name>
      <parm-t>4</parm-t>
      <parm-u>80</parm-u>
    </list-b>
  </data>
]]></artwork>
          <t>(generated through instance-2 merged with template-1 expansion)</t>
          <artwork><![CDATA[
  <data>
    <list-a>
      <name>templ-1-list-a-entry-1</name>
      <parm-x>1</parm-x>
      <parm-y>30</parm-y>
    </list-a>
    <list-a>
      <name>templ-1-list-a-entry-2</name>
      <parm-x>3</parm-x>       
      <parm-y>30</parm-y>
    </list-a>
     <list-a>
      <name>templ-1-list-a-entry-3</name>
      <parm-x>3</parm-x>
      <parm-y>50</parm-y>
    </list-a>
    <list-b>
      <name>templ-1-list-b-entry-1</name>
      <parm-t>2</parm-t>
      <parm-u>40</parm-u>
    </list-b>
    <list-b>
      <name>templ-1-list-b-entry-2</name>
      <parm-t>4</parm-t>
      <parm-u>60</parm-u>
    </list-b>
    <list-b>
      <name>templ-1-list-b-entry-3</name>
      <parm-t>4</parm-t>
      <parm-u>80</parm-u>
    </list-b>
  </data>
]]></artwork>
          <t>(generated through instance-3 merged with template-1 expansion)</t>
          <artwork><![CDATA[
  <data>
    <list-a>
      <name>templ-1-list-a-entry-1</name>
      <parm-x>1</parm-x>
      <parm-y>30</parm-y>
    </list-a>
    <list-a>
      <name>templ-1-list-a-entry-2</name>
      <parm-x>3</parm-x>       
      <parm-y>30</parm-y>
    </list-a>
     <list-a>
      <name>templ-1-list-a-entry-3</name>
      <parm-x>3</parm-x>
      <parm-y>55</parm-y>     //deviate from template value
    </list-a>
    <list-b>
      <name>templ-1-list-b-entry-1</name>
      <parm-t>2</parm-t>
      <parm-u>40</parm-u>
    </list-b>
    <list-b>
      <name>templ-1-list-b-entry-2</name>
      <parm-t>4</parm-t>
      <parm-u>60</parm-u>
    </list-b>
    <list-b>
      <name>templ-1-list-b-entry-3</name>
      <parm-t>4</parm-t>
      <parm-u>88</parm-u>     //deviate from template value
    </list-b>
  </data>
]]></artwork>
        </section>
      </section>
      <section anchor="b-using-existing-yang-constructs-in-template-and-instance-yang-definition">
        <name>B: Using existing yang constructs in template and instance YANG definition</name>
        <t>This appendix illustrates the use of groupings in the YANG definition of template and instances and more specifically it shows how easily mandatory and default statements can be introduced in the template definition by refining the grouping uses statement.</t>
        <section anchor="the-grouping-construct">
          <name>The grouping construct</name>
          <t>By defining common structures using grouping, one avoids repeating code, ensures consistency and makes future changes easier since modifications only need to happen in one place.</t>
          <t>Example:</t>
          <artwork><![CDATA[
 grouping interface-config {
 leaf parm-a {
   type string;
 }
 leaf parm-b {
   type boolean;
 }
 leaf parm-c {
   type unint32;
 }
]]></artwork>
          <t>}
This 'interface-config' grouping defines a common structure that can be reused across different YANG modules or different parts of the same module.</t>
        </section>
        <section anchor="the-uses-construct">
          <name>The uses construct</name>
          <t>The 'uses' statement applies a previously defined grouping where needed in the model (e.g. it copies the data nodes of the grouping at the place of the 'uses' statement.</t>
          <t>As an example, the data nodes defined in the grouping above can be used in the template and in the instance definition:</t>
          <artwork><![CDATA[
 container data-nodes-pattern {
 list template {
  key "name";
  leaf name {
    type string;
  }
  container data {
    list interface {
      key "interface-name";
      leaf name {
        type string;
      }
      uses interface-config;
    } 
   } 
  }
list instance {
  key "name";
  leaf name {
    type string;
  }
  container data {
    list interface {
      key "interface-name";
      leaf name {
        type string;
      }
      uses interface-config;
    }
   }
  }
 }
]]></artwork>
        </section>
        <section anchor="the-refine-construct-to-control-default-and-mandatory-statements">
          <name>The refine construct to control default and mandatory statements</name>
          <t>As explained in section 2.3, with the template method, some data nodes may need a default or mandatory statement when used for the template definition but should have no mandatory neither default statements when used for the instance definition.</t>
          <t>The refine statement available in existing YANG version easily allows to control mandatory and default statements when used along with the uses statement.</t>
          <t>Assume in our example that it is desired that parm-b has a default statement and parm-c has a mandatory statement when they are used for the template definition.</t>
          <t>Then the YANG becomes:</t>
          <artwork><![CDATA[
 container data-nodes-pattern {
 list template {
  key "name";
  leaf name {
    type string;
  }
  container data {
    list interface {
      key "interface-name";
      uses interface-config {
        refine parm-b {
          default "true"
        }
        refine parm-c {
          mandatory true
        }
      }
    }
  }
}
list instance {
  key "name";
  leaf name {
    type string;
  }
  container data {
    list interface {
      key "interface-name";
      uses interface-config;
    }
   }
  }
 }
]]></artwork>
        </section>
      </section>
    </section>
    <section anchor="conclusion">
      <name>Conclusion</name>
      <t>Using templates in YANG allows to efficiently configure large amounts of similar data nodes while keeping the running data store size small. This is beneficial in term of device memory footprint, ease of configuration, configuration time and potentially YANG validation processing in the device. This draft explains some practicalities of the template method, including how to ensure that mandatory and default statements do not jeopardize the effectiveness of the method.</t>
    </section>
    <section anchor="conventions-and-definitions">
      <name>Conventions and Definitions</name>
      <t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>
      <?line -18?>

</section>
    <section anchor="security-considerations">
      <name>Security Considerations</name>
      <t>TODO Security</t>
    </section>
    <section anchor="iana-considerations">
      <name>IANA Considerations</name>
      <t>This document has no IANA actions.</t>
    </section>
  </middle>
  <back>
    <references anchor="sec-normative-references">
      <name>Normative References</name>
      <reference anchor="RFC2119">
        <front>
          <title>Key words for use in RFCs to Indicate Requirement Levels</title>
          <author fullname="S. Bradner" initials="S." surname="Bradner"/>
          <date month="March" year="1997"/>
          <abstract>
            <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
          </abstract>
        </front>
        <seriesInfo name="BCP" value="14"/>
        <seriesInfo name="RFC" value="2119"/>
        <seriesInfo name="DOI" value="10.17487/RFC2119"/>
      </reference>
      <reference anchor="RFC8174">
        <front>
          <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
          <author fullname="B. Leiba" initials="B." surname="Leiba"/>
          <date month="May" year="2017"/>
          <abstract>
            <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
          </abstract>
        </front>
        <seriesInfo name="BCP" value="14"/>
        <seriesInfo name="RFC" value="8174"/>
        <seriesInfo name="DOI" value="10.17487/RFC8174"/>
      </reference>
    </references>
    <?line 546?>

<section numbered="false" anchor="acknowledgments">
      <name>Acknowledgments</name>
      <t>TODO acknowledge.</t>
    </section>
  </back>
  <!-- ##markdown-source:
H4sIAAAAAAAAA+1c63LcNpb+ryq/A7b1Q/ZsszuS7BlH8SojW/ZEVb5kbaey
qVR+oEl0N0Yk0UOQandiv8s+yz7ZngsAgmy2ZDneqZlZOxdLvAAH5/Kdg3MO
kSTJnb39/X34n7goa1WVqk7OKzmvxQtZXWZmXYq3qljlslbwDD72WpWyUKJe
aivmOldiXplCZPhOUpvMJBvTVPhIsqpMbVKTT4pM1EYsVC1sLataZRMciKeh
weamKmQtYMQRD/TID3KaPFqb6nJRmWYFP9MlGG80cdQ8M5XQpa61zIVVdbMa
C3hVmDLfiFIpmlhlugZ6YRpd2VrMcpNeCjOHX1WeWaLlFT4/qnWdqxG9Z/HF
mRLpUpYLlX0jMpWrWomRnM0qdTUSeo4TVYLeQcrt0lQ1DXZWboSB+SqRGuBp
WYtUljgYEqKysZg1NY0tKzVvclGaGmfTZV2ZrEnhuaoyFRP2xiB7iFCx1nmO
78E6hWxqAyzTqcyB8qypdLlgBiBlMPlGwOiiKd0CPL/OTXkAjC7TvMlgNclX
X40EsHCUoIRtDesqHatykjMR8VzOVG7DLRCW+AgxuSGZDguimG1wMByiNiYn
DgMDgE3wA15Nm6pCbl2pympTfgPrARIzk+JwI5xXqHcSlFH51bxFJaydfuIk
VlxWskC1Tap5eiKWdb2yJ9PpQtfLZjZJTTFN5cxM46dwoJ9AZ1BIlYKhUkXk
ACm6Yk44aYsV0ytFpufwAxLLqktsekKsDuwDYkH4uBJcIDyULgP/QNnvTt4V
OS3qv148HwtVp5PJ5B4vDA3yzh6p1okYfW9WDSwQJSxFroGloLw/nb38i8hk
LUF9Mlh3Y/G+54WdjO7ssarCABugK/G3kjmsXaG04JEULixMtTkB4c4NTurY
feIkXMm/Sng+oSFAned6aCRQozt7tpkV2uJ6680KBrh4+vaZEPtC5tYAEbrM
1ErB/8p6NBYjtAVTgdniLxdnj+Ev1MOL12+fAV1lU8xUdQLkwDzwF8xsgZeN
PRF11QAUwbKOYYWVkifCrOydvaB+J2C/dWGyO3uXagNXM3hdJC1n6DeAJhQR
/4JrExYsSc50rmvQ0itVNjitEL0hheC1/QizIb//grfxciF17h/7s1b1fGKq
Bd6QVbps9RAfwyv6Sk38U1O8MJ1VZm3VlEeYoiRgeU0NoEL041BCAFrkLJ3X
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
xrDrWgAA

-->

</rfc>
