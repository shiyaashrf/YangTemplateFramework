<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.19 (Ruby 3.3.5) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>


<rfc ipr="trust200902" docName="draft-yang-config-template-framework" category="info" consensus="true" submissionType="IETF" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="yang-template-framework">Principle for populating list of YANG data nodes using a template technique.</title>

    <author fullname="Robert Peschi">
      <organization>Nokia</organization>
      <address>
        <postal>
          <city>Antwerp</city>
        </postal>
        <email>robert.peschi@nokia.com</email>
      </address>
    </author>
    <author fullname="Shiya Ashraf">
      <organization>Nokia</organization>
      <address>
        <postal>
          <city>Antwerp</city>
        </postal>
        <email>shiya.ashraf@nokia.com</email>
      </address>
    </author>
    <author fullname="Deepak Rajaram">
      <organization>Nokia</organization>
      <address>
        <postal>
          <city>Chennai</city>
        </postal>
        <email>deepak.rajaram@nokia.com</email>
      </address>
    </author>

    <date year="2024" month="September" day="17"/>

    <area>ops</area>
    <workgroup>netmod</workgroup>
    <keyword>templates</keyword> <keyword>profiles</keyword> <keyword>yang scalability</keyword>

    <abstract>


<?line 69?>

<t>In YANG design, templates refer to pre-defined structures or configurations that can be applied multiple times, potentially with variations, to ensure efficiency in managing complex networks. These templates are essential when a network model requires repetitive configurations or shares a similar structural pattern across different network elements.</t>

<t>While YANG itself doesn’t have a formal "template" keyword or specific syntax dedicated to templates, developers often achieve template-like behaviour through YANG constructs such as grouping, uses, typedef, and augment. These constructs help modularize and standardize configurations.</t>

<t>In a typical deployment, A parent device can host multiple functional entities (e.g. a sub-systems) which is replicated many times, where each such functional instance is to be controlled by a set of data nodes. This can lead to long device configuration times, large memory footprint in the parent device and inefficient YANG validation procedures due to the large running data store size. This becomes more and more difficult as the system grows bigger and integrated, which leads individual data designers to employ various methods as per the requirements.</t>

<t>This document explores some of the constructs and highlights related issues while using such methods and possible solutions to mitigate such issues.</t>

<t>This document presents a generic method that improves the efficiency issues mentioned above and which relies on features already available in the yang language that are supported by off-the-shelf toolset. It should be considered as a method that can be used when designing a module for a specific purpose, possibly a specific standard.</t>



    </abstract>

    <note title="About This Document" removeInRFC="true">
      <t>
        The latest revision of this draft can be found at <eref target="https://example.com/LATEST"/>.
        Status information for this document may be found at <eref target="https://datatracker.ietf.org/doc/draft-yang-config-template/"/>.
      </t>
      <t>
        Discussion of this document takes place on the
        WG Working Group mailing list (<eref target="mailto:WG@example.com"/>),
        which is archived at <eref target="https://example.com/WG"/>.
      </t>
      <t>Source for this draft and an issue tracker can be found at
        <eref target="https://github.com/USER/REPO"/>.</t>
    </note>


  </front>

  <middle>


<?line 82?>

<section anchor="introduction"><name>Introduction</name>

<t>This draft considers the case of a device where each such functional instance is to be controlled by a set of data nodes with almost identical values from instance to instance.</t>

<t>Rather than defining a YANG model where all data nodes of all instances need to be configured one by one in the device running data store by the management system (e.g. a NC client), this document presents the idea of a “generic data model” in which the running data store is configured with a list of instances without explicit data node being configured and the instruction to locally populate each instance's data nodes with a copy of a "model" data node set (called "template") that is configured in the running data store.</t>

<t>Although the data nodes of instances have largely similar values across, a small number of data nodes may however need to have a value that differs from the ones in the common template. The generic method presented in this document also gives the possibility to overrule or complement values originating from the template, on a per instance basis.</t>

</section>
<section anchor="concept"><name>Concept</name>

<t>a)Identify the set of replicable data nodes                         <br />
b)Configure a list of templates containing such data nodes          <br />
c)Configure a list of instances, each of them referring to one of the configured templates along with any customization.                    <br />
d)Parent device instantiating the required data, controls each instance, ie: merges the data from template and instance and produce the final set of configurations per instance, like Netconf merge.</t>

<figure><artwork><![CDATA[
 Eg:
 Identify common data nodes: 
 a, b, c

 Configure list of templates:
 Template common {
          container{
                    a=x
                    b=y
                    c=z
                   }
                 }
  Configure list of instances with template reference:
  Instance {
           Template-reference = “common”
           a=z
           b
           c
           }
  Parent device produces final configuration for each instance:
   Instance {
             a=z
             b=y
             c=z
            }
]]></artwork></figure>

</section>
<section anchor="template-framework"><name>Template Framework</name>

<t>The templates concept can be achieved with existing yang constructs like grouping and uses statements.</t>

<t>Example:</t>

<section anchor="grouping-construct"><name>Grouping construct</name>

<t>By defining common structures using grouping,you avoid repeating code,ensure consistency,and make future changes easier since modifications only need to happen in one place.</t>

<t>Example:</t>

<t>grouping interface-config {</t>

<t>leaf interface-name {</t>

<t>type string;</t>

<t>}</t>

<t>leaf admin-status {</t>

<t>type boolean;</t>

<t>}</t>

<t>}</t>

<t>Here, the interface-config grouping defines a common structure that could be reused across different YANG modules or different parts of the same module.</t>

</section>
<section anchor="uses-construct"><name>Uses construct</name>
<t>The "uses" statement applies a previously defined grouping. This allows the grouped set of definitions to be instantiated where needed in the model. 
 Example:
  container interfaces {</t>

<t>list interface {</t>

<t>key "interface-name";</t>

<t>uses interface-config;</t>

<t>}</t>

<t>}</t>

<t>In this example, the uses statement applies the interface-config grouping defined earlier.</t>

</section>
<section anchor="mandatories-defaults-leafrefs"><name>Mandatories, Defaults, Leafrefs</name>
<t>While conceptually, the idea of templates improves the re-usability and consistency factor, there are certain nuances, which needs to be addressed while handling data nodes in the grouping with defaults and mandatories and leafrefs.</t>

<t>If the grouping created with replicable data nodes contains default or mandatory nodes, and such groupings are used both in the template and in the instance, there is a possibility of overwriting the configured value of the template with the default value in the instance due to the merge operation.</t>

<t>When using leafref inside a grouping (which acts as a template), Extra care must be taken on the path specified. This is because grouping is essentially a reusable blueprint, and the leafref path must be resolved correctly when the grouping is used in different contexts.</t>

<t>There are two primary approaches to using leafref in templates:</t>

<t>A)Absolute Paths: These reference a specific location in the YANG tree.</t>

<t>B)Relative Paths: These are defined relative to the location where the grouping is used.</t>

<t>While there is no recommended option to resolve the path, it is a designers choice to choose Absolute path where the referred path is a fixed well defined global path and relative path which could be flexible and re-usable depending on the context in which the groupings are defined.</t>

</section>
<section anchor="refine-construct"><name>Refine construct</name>
<t>In order to solve the issue with defaults and mandatories, existing yang language provides us with a powerful construct: "refine"</t>

<t>The refine statement in YANG is used to modify or refine the definitions of a grouping when it is applied using the uses statement. This is particularly useful when the same template (or grouping) is reused in different contexts but needs to be adjusted slightly without altering the original grouping definition.
While the refine statement is powerful, it can only be applied within the context of a uses statement, and it allows fine-tuning of things like mandatory requirements, default values, descriptions, and other constraints.</t>

<t>The basic workflow for using refine with templates involves:</t>

<t>1.Defining a grouping(without mandatories and defaults), which can be (re)used in a template and in certain functional instance.</t>

<t>2.Apply the grouping with the uses statement.</t>

<t>3.Use the refine statement to modify specific characteristics of the applied grouping in a particular context(refine mandatories and defaults).</t>

<t>Example of Using refine with Templates</t>

<t>Step-1: Defining a Grouping. Here, a basic grouping for an interface configurationis defined devoid of mandatories and defaults</t>

<t>grouping interface-config {</t>

<figure><artwork><![CDATA[
leaf interface-name {

   type string;

    description "Name of the interface.";

}

leaf admin-status {

    type boolean;

    description "Administrative status of the interface.";

}
]]></artwork></figure>

<t>}</t>

<t>Step-2: Applying the Grouping with uses construct</t>

<t>container templates {</t>

<figure><artwork><![CDATA[
list interface {

    key "interface-name";

    uses interface-config;

}
]]></artwork></figure>

<t>}</t>

<t>At this point, the interface-config grouping can be (re)used for the templates list as well as functional instance list . refinement to this grouping can be done to suit specific use cases.</t>

<t>Step-3: Refining the Grouping:</t>

<t>In certain contexts refinement would be required to the interface-config grouping:</t>

<t>1.Make the admin-status mandatory in templates.
2.Change the default value of admin-status in templates.</t>

<t>container templates {</t>

<figure><artwork><![CDATA[
list interface {

    key "interface-name";

    uses interface-config {

        refine admin-status {

            mandatory true;

            default "true";

        }

    }

}
]]></artwork></figure>

<t>}</t>

<t>In this example:</t>

<t>•The interface-config grouping is used within the templates container.</t>

<t>•The admin-status is made mandatory and its default value is set to true (instead of false).</t>

</section>
</section>
<section anchor="benefits-of-templates-in-yang-design"><name>Benefits of Templates in YANG Design</name>

<t><list style="numbers" type="1">
  <t>Reusability:
Templates encourage reusability by allowing common structures to be defined once and reused multiple times. This reduces duplication and simplifies model management.</t>
  <t>Consistency:
By using templates, similar configurations are defined and applied uniformly, leading to more consistent data modeling and network configuration management.</t>
  <t>Simplified Maintenance:
When a template is modified, all places where it is used will automatically reflect those changes, reducing the effort required to maintain and update the model.</t>
  <t>Modularity:
Templates promote a modular approach to YANG model design. By splitting the model into reusable parts, it becomes easier to scale and extend.</t>
</list></t>

</section>
<section anchor="conclusion"><name>Conclusion</name>

<t>Using templates (grouping and uses) in YANG allows for efficient reuse of model components. The refine statement provides flexibility to adjust certain properties like mandatory or default in specific contexts. leafref enables cross-referencing of leaf values within or across modules, with careful attention to path resolution. Proper use of these features helps create clean, modular, and maintainable YANG data models.</t>

</section>
<section anchor="conventions-and-definitions"><name>Conventions and Definitions</name>

<t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<?line -18?>

</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<t>TODO Security</t>

</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<t>This document has no IANA actions.</t>

</section>


  </middle>

  <back>



    <references title='Normative References' anchor="sec-normative-references">



<reference anchor="RFC2119">
  <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author fullname="S. Bradner" initials="S." surname="Bradner"/>
    <date month="March" year="1997"/>
    <abstract>
      <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="2119"/>
  <seriesInfo name="DOI" value="10.17487/RFC2119"/>
</reference>
<reference anchor="RFC8174">
  <front>
    <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
    <author fullname="B. Leiba" initials="B." surname="Leiba"/>
    <date month="May" year="2017"/>
    <abstract>
      <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="8174"/>
  <seriesInfo name="DOI" value="10.17487/RFC8174"/>
</reference>



    </references>




<?line 328?>

<section numbered="false" anchor="acknowledgments"><name>Acknowledgments</name>

<t>TODO acknowledge.</t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAAAAAAAAA71a7Y7byHL9z6foyD/uTCDJ17sL5Ea73nvHnrF3AI/tzIyx
WQT50SJbUt+hSF52c8baxQD7GgESIMij5FH2SXKqqrtJShpjEQQxYFuiyO76
OFV1qpqz2Sx79uxZ9kxdVt60lfGz81avvLrS7V1RP1Tq1mybUnuT0U3XptJb
o/zGOrWypVGrtt6qgp6Y+bqoZ7u6a+mWWdPWvs7rcr4tlK/V2njlvG69KeZY
R/bgtVZ1u9VeYcGJrPNdXOP72XcPdXu3buuuwWe+hOUmcxblTd0qW1lvdamc
8V0zVXhQ1VW5U5UxvKsprIew2MS2zqtlWed3ql7hqykLR4J8oNsn3vrSTPgx
R88tjco3ulqb4ltVmNJ4oyZ6uWzN/UTZFe3TKn6GxHabuvW01lm1UzV2a1Ve
w5iVV7muaC0SwxRTtew8L61bs+pKVdWeNrOVb+uiy3Ff29Yti3VTk2VYSvVg
y5Ieg5JKd76GtWyuS8hddK2t1qI9yYW9dwqLq64K4oupzuvqD7BwlZddAU1m
f/zjRMF6kxn51XnoVAUrlexfkuCdXprSpV/gJPU73BNWFCEcnLDcYS1awdd1
ybaF7rAQPtDVvGtbMtS9aZ2tq2+hCwQs6pxWm9C2ynzWAKARTW4JeD4gknZw
6q7VWwLqrF3lC7XxvnGL58/X1m+65Tyvt89zvayfD+/COj8BKeSc1mCl3LAs
kMO2YoTgZNWIsFoVdoUPJKnAlSz0mk2cDAdB4XPSgpTDPfkmmQ74Ppl/3pas
0D9fvZsq4/P5fH5KSiH6MgbTQk0+wqG5bUp+TDV100FR8nFpYVUg96ez929V
ob0Gegpo3zn6Vfc28SbfVPZvnZlPMoEslt1B0lm8ZbaCLQy5bpLl+L6u290C
jl7VWRYsvwi+5ucA5pU99njmuuXWOlLZ7xo8dHlx+0apZ0qXrsautipMY/BP
5SdTNaEoqFuEK325PHuF/wiEl9e3byZZ1W2Xpl1kUM0sMmzpYMvOLZRvO5NB
h68zYEovVN24LMFugZD127rI7swOF4tFpmbJFI6+IA2Rc/gzaaMcQkcvbWn9
Lrs3VYfdlAqL/fgWn0WVH7EFWfYt/YKrW21LuuEvEY5AFi7rNt/0oBv89pzX
EhQu1Kebi+vn1xcfP+CaRMjxh96d3V7c3GYZwhxJBZJBbDyiFNJFKY65rmEn
rz4al28s/1a3a13Zn4GTulqo9/Wd1Xw9h4oLJCX/YNqGrxjRouUl5g0v8ZeK
HhB19ve62didVmduAzD877ZytMJc8wpf2uncmEbfqWv9Vw10/Y69Xm9MVWk7
3KvgNeatrDHYreIItPdwdUYw779ls9lM6aXzrc59ll1WIb6Ms+tq2iOpT1rI
CLPCrGyF3IbHutx3LX6vOecjTLqWBUaS2uiU/3XTlBYPbLvSc3B7uzVuivim
KmE5lz8AKupeIz74+SmXL4QAMpJZrWxuTZXvKB1vdaXXBE2ohrU+UwhQQLg5
sqNxZiA1ZWHjnOyhHmAyZIpwu0LYmBKK/a2zLWvYGGQh2GVfE+jmNpru0crZ
rS11m1THso32RByUztvauUGmjBuhfm7xHXUt+3FDiZJtbL0z5UoVtXHVb7/+
m1cbja21pMsSJTloMVEhtlmOxuQWxlBuV3n9GY4qLKUwLvZJ7ymu35uyblBU
kDM9qQ2k41q6Z1baOwPXYFPLxXyDOF9vRDTKPqwfanuHLK6dJAgYfco1Z8pJ
AjCYKl0VKMprUjDaf/D4xpQNGRpZvLU/G74bLKgqdFvQ97Gl54xATYtTgYcW
TVnvaOmpOoOd2apQzeaGkbWpURMSplYo+rQMHiSHewuHnZj5ek5u65Yzt3PQ
3p0CBxZKWXZ5GcwHUO0iKoETwg1MJuoPFrYVSZ8z7Qk0qSb2UpZc6mknw2Wq
r1Bzqdkkb2k0O6qsgd6ox9ACUQJYC4V1a7aoTABE7RuURR+5yNgQZFJEYwgR
Lx6816UtZEkUgNwUHKRFZyLvkB3arqooklhah+IEkgW3BJGXBhGGx7Z0nbbh
D4Rvm8PoBAtaSuxKCHnAM3a9JsLAQqG0tpqJn5ic9CdGVdh7W3TkYNpXkg1B
lSJ+Sy7nPFB32NqgDuAZbNVQ/sF2IWBjRLGkqNodXQAFweOkqiP+WK+EY/V4
JLk2dr0p8dcTAEr2Pmp4h4ceODqFUbDn0/Z4rEFw2yV+d3XZhRQHmgOcrYl2
8P2yzlzti4WkSUmIEsjaQFUEsCwtWdJu4aR7I+YcJjsRi5bAfpATRO5eXCEG
hfyEcnh5ZbQkYl2CJRRA4j1qgiZ5A2q4+Jf4p9NM2rSQVNc1TU1dCcG3Xq1m
uHfmNpSamLEahPWlJ47flUUAvLMFIqQgr+iRIiHdM/HlbCu+FYbGaUB4ne4T
WdO1sKyZRvvuhj/GVDFXKtSqrS2K0mTSrnHXQKaJ9uamKgoo5sy1YyDoGC//
t9EtZUuXW0pFlpgeZy7EH3mOm8O0Krc68pkgcq25VYLhyE6oqGImjl+pTSIq
quNwQ9Kl7GV1qddb9skEF4AX9miVABD0PxLzuI9u4MLKgRVjOqbP969VXlJ2
OZ1K63uIbFoA+mux9W+//nsEOu/D+vz263+QLAJdDuVDUShT9kqIcRP373Wm
H+pO4h3R4nsDwQzCDdIiFC4sXcgCoUFBK8y8I/QYARJxiz+4Qydj0WYn+k1Y
oclgW0LGCa2IHfvafRoCfKRV8Meh9oSKs5I0W4uBxm7v1WeqwCkcCkRKEjAn
NGRKYN0SUKSx2EPtVu9QPR/ACNqEn8A/eBkRW6hMgDHJAzSljhi1YUuWDKpy
8d/PbgEdUechcKhFQnsQs55EP3clJAvSXNtStmBeSTSPHwoqookCAZS+MMkW
BZlSOtRcLlLkLbWzVCzQs9b43oDq6tNLjtaVYD8EdmAElDYH1nr6T7Y8fR0d
OwBqz0ApgWgJbc42x1fN8qPLJIdPBZxSz7ZCxnnyQaaqhoUuYmzAgZltCILB
cfIOUNuGtmL+hFbF6ccRxxBBvBWTD6pwwQpNY5504yCaKovWZmuAU9fjWTwW
23VhCsFPXGfDLEjGCpUMt0jDPVY+dDAYE9HZ98bTTbLjPBNd+N+L9UI+JKcH
+Pb+WIRboc0SCmXyrXfLgW/DinE8GFf8JRsbMyDAtPs/9H/0y89P/rZ8uXvy
t/zlz0/99nj8h3j5UK1xbu39w1gDGzFBXdTd4KwDfaIlZukZ9ZIqgRgG2X//
AX0o/3L/Qr5/IaowRmhAjQuQGbNqnqINgRl1+YIyR6V7wh3H/PBI2SZh400a
GWW3GzPOD5SPUqMsbVqofOYznEMRx9xtQGMZ7bEl46jhSSB08ZEYA80XMlih
KcqzZ2/j3WkZXH6165lHgO+gpxcinDo/mgfq+9oW3CpLKsgROdPQpTPvAm0A
c51yt6DvqCnz/BuPCik9OIu4xcKwOWoosbzYZQ/n1hvdNKCPqBqU3nhEScVx
qJLqDUCdRrvCPWFUR96kQZPRq8FvPGwnP4cZF6mKp7+VK4/yHz+ji62tZmRN
tCDDJ5ZgxEZXw0fg5x8A9mmgGHuCJBFlZOKYRIztHJhzpNetYfZ8MEyItBBF
kScS/S9oB72LJcCRknLbnP3+yQnKgs8JfRMCy6RHSxjPkHAo2DQPcGUABiSJ
KoSmEJSC+jzai3+hMVAgxYyk1Bkth2VD+gEoSw7uKRCzqPkIqn2+7K3pokMp
V6Wr0TN3Zkej1qGbJ8FDHBX7Thk5XLIJjR2YnoRZpHhzHFPJSr/H0QWQ3uLu
VpygrqiPoeEv1fJzs9Lon/HpHdCGZOnCXCgkg4546XTEqPuEMeoVWzPrXBjm
choYxKCCeNiR1yFWQVFoWjItKGFgFULFh6c+uihampgVoRlG3BZlYqlCXILz
ksqcq4qglAwKenX5exn0pAHPavxwjnbVx4R3nH4FRLi4B8E/7rCTe2QOxQwr
ruwGZzC130Sp94hH6gyERoitLIfCgJHCA8RIH1qbCNCAawljDgGY1pcyyn2X
SC237W05nMkwbVE0tRNyRuNCJEFJw8GE9CBAQYOEaMET8aLm+YYbHIWgWbv4
7FvN521q2zk+fPNIy5RWwygJQoZ22xQhxGX0o2G6QYp1/SCVe3TKU+yoJbTi
8dQ0dVpRVl497gtY1SWVtrxuW5N7GvmSeiM0WCceg5X6BMeHiZ/DtCdi2T/Q
LNpuNSCAyGxrlE7DKN6314ixZWenZ0ue4BgwCL8B7ZOhZc9ZBvMH6hGZQQSv
cRL2reHc+ur0msZHNDAerUTSxSzQxjvi2C0uKNnwmO60tKSDBMaKDg2pbtBZ
Elr7JvawwabJlSDcXtDbD9XyTW1l+IBPNeRL+rN7ekGkq8D6fJ1XWdnPFJqG
JhCxHJT1UobeG/Z30jCsRlBMxWxVgsIQSOTOWYCMnIqRznXsJdnD4+nAOJDD
/tTEPbvmz4OqhvRdt4UcUPQW4fHZl7PTdI9jpfkYJVkr54ux+2/QL7d0bJ32
XahJy6JMhNbJl0HJsOE8JcKaBoZEenaUwsLdIUWk0snzhT63UogEp4ZDFMH3
YYHqo5cYAY1oUYJ2dBMJnWKNGULKUicQJG52KjPxpwOQz+/H1eKviG6iADxQ
Dac4NJjRJQpklDP06+VelbSS5RLYj9jPJasztIklM08cnCnRjnYMIzbh2DiS
nKyP/IU2mvmOmS9nbgYa8+q+tAxHzdNxHufvLm9tE06raPn07gOdp9k4n5bx
Q66I/q+wObcj4sSg8Kjjovp6TxjmdPVift6PBqP5TqKV9+tshPlpLO2hrThp
zWl0qz4ogZEWHJmEQoGv5mew9O5IyT8CwSz7ev7JPeHNHv0pwaIvoJNHQAVB
mCcWG307YPgUgAnW0dMnYY8n7QCBArWkpT8dGP02HZVnN940sxd0Epvs/TZR
X6H4OngyicWz7GpASUd9p3Upa6JLpcYJMjwlKnz9pX6Gaerxhia2nqOeJvWj
A5SqyXvdn4qkdeaTcPvjYJe9FigtN26Dju9yRs9aigEuDGGRL237GMz/1UIx
2GLieDvCWzduZVTWtwp98ERT7bcKSdTj7UL6+YmWYSDpmZdeoamZ9Hy5HdgP
QELMkCY6kRS8jass/j92HsH3zANyYyyxEPsbFdQvUxXskOtSmBGVo4MQSkhs
6K8X6jrifGhobqwv+5SQMv9g64e+VQ0zwEBunrSCJLIrmgdwdA+x1WfbIVOb
I+0MXi8aU+h6D57jB/8/cTF8nv6E1PJU8MQ/vc70cs+3hzdEfSf0+2Tvhsf+
6+MQl3s97CLLfvv1v26/iM7ISwY19GB0TT1sXGlsdnJeMayXUmLdfsfjeEJA
IIE26oRQTQfh9BqiLp2hJJ09U69MBevJJON2UAuFQZ0zn80AIwA39bw8x+tv
Bn2vkXvXJnQn0rzRwR0V/eNDLiEyMU/XcQodaND4hZXAsAB5HjUWnbw+QEmP
20/05iU1Ui6c3/UHaoRnGrrG5pwFf7WLXK5/cSMe5uwNu4c9Bb9xEblgZel9
ERoX0OF6OBLgc/o0CvCDI7g4LoyvpoznpEN5v56rm6hPoa6IzpgqzU5/lFdp
EpOwLkzz6LCfTp14ZOdCdyH8NSCNstzoJU4ETYl+EOij7iRMCqdi5ZifzApq
+lHG2ZJIlKN4/NkU/O5fmill38zVVXjv5AAnIPfbmvhPfDUldZC08OAAVrqo
OXnKwRQ+df/yMwSo+0aY53BMU+OLE2HaSekYqgqw+CXJIp1FlZ3j8+tPYyCo
k4Pp7mmKhUhhaaqdXvtgwDLBYNHo0AylgDioOtqapAZHerR08iaUPhUA3Nbg
ozUH5JhmkCHOcV/P6GKznjpwwGZJQ0ueaKazgUC8mWyEY72QhYhTyfQzjDun
Uv7jW8P0ulUVO2DuOrkN7uRA6yMLrIIxPHfk6eUIeh3JhZGTyonDTCMEpqE1
FFCxQ/tXTdmmVFuC2+5FAGFw533zJnSfKgm9sOXU5OrTzS297Un/q/cf+PP1
xT99ury+OKfPNz+cvXuXPmThjpsfPnx6d95/6p98/eHq6uL9uTyMq2p0KZtc
nf00EU0mHz7eXn54f/ZucuTstTVpQovS0LTG89scmdC4pTQKr15//O//fPGN
+uWXv7t+8/qrFy/+8fExfPnTi3/4Bl+opwydTxXGOcyHdhmN73XLtB3xnuvG
eqT6KfEbt6GX6ikvwJ5//y9kmX9dqO+WefPim+/DBVJ4dDHabHSRbXZ45eBh
MeKRS0e2SdYcXd+z9Fjes59G36PdBxe/+3NJwTd78ac/fy8YujF5R4lJakIR
Jn6Enw/nH9KvfOvl2fuzw9tG/txonhHxnTqPr9Lx+zJLnd/RKmf5XVU/lKbg
N/Vc9stC3gswxcsJV+HJY9hcpzvhoP8Bj8p1Ux4xAAA=

-->

</rfc>

