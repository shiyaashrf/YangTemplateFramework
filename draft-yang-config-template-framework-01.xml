<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc version 1.7.19 (Ruby 3.3.5) -->


<!DOCTYPE rfc  [
  <!ENTITY nbsp    "&#160;">
  <!ENTITY zwsp   "&#8203;">
  <!ENTITY nbhy   "&#8209;">
  <!ENTITY wj     "&#8288;">

]>


<rfc ipr="trust200902" docName="draft-yang-config-template-framework" category="info" consensus="true" submissionType="IETF" tocInclude="true" sortRefs="true" symRefs="true">
  <front>
    <title abbrev="yang-template-framework">Principle for populating list of YANG data nodes using a template technique.</title>

    <author fullname="Robert Peschi">
      <organization>Nokia</organization>
      <address>
        <postal>
          <city>Antwerp</city>
        </postal>
        <email>robert.peschi@nokia.com</email>
      </address>
    </author>
    <author fullname="Shiya Ashraf">
      <organization>Nokia</organization>
      <address>
        <postal>
          <city>Antwerp</city>
        </postal>
        <email>shiya.ashraf@nokia.com</email>
      </address>
    </author>
    <author fullname="Deepak Rajaram">
      <organization>Nokia</organization>
      <address>
        <postal>
          <city>Chennai</city>
        </postal>
        <email>deepak.rajaram@nokia.com</email>
      </address>
    </author>

    <date year="2024" month="September" day="16"/>

    <area>ops</area>
    <workgroup>netmod</workgroup>
    <keyword>templates</keyword> <keyword>profiles</keyword> <keyword>yang scalability</keyword>

    <abstract>


<?line 69?>

<t>In YANG design, templates refer to pre-defined structures or configurations that can be applied multiple times, potentially with variations, to ensure efficiency in managing complex networks. These templates are essential when a network model requires repetitive configurations or shares a similar structural pattern across different network elements.</t>

<t>While YANG itself doesn’t have a formal "template" keyword or specific syntax dedicated to templates, developers often achieve template-like behaviour through YANG constructs such as grouping, uses, typedef, and augment. These constructs help modularize and standardize configurations.</t>

<t>In a typical deployment, A parent device can host multiple functional entities (e.g. a sub-systems) which is replicated many times, where each such functional instance is to be controlled by a set of data nodes. This can lead to long device configuration times, large memory footprint in the parent device and inefficient YANG validation procedures due to the large running data store size. This becomes more and more difficult as the system grows bigger and integrated, which leads individual data designers to employ various methods as per the requirements.</t>

<t>This document explores some of the constructs and highlights related issues while using such methods and possible solutions to mitigate such issues.</t>

<t>This document presents a generic method that improves the efficiency issues mentioned above and which relies on features already available in the yang language that are supported by off-the-shelf toolset. It should be considered as a method that can be used when designing a module for a specific purpose, possibly a specific standard.</t>



    </abstract>

    <note title="About This Document" removeInRFC="true">
      <t>
        The latest revision of this draft can be found at <eref target="https://example.com/LATEST"/>.
        Status information for this document may be found at <eref target="https://datatracker.ietf.org/doc/draft-yang-config-template/"/>.
      </t>
      <t>
        Discussion of this document takes place on the
        WG Working Group mailing list (<eref target="mailto:WG@example.com"/>),
        which is archived at <eref target="https://example.com/WG"/>.
      </t>
      <t>Source for this draft and an issue tracker can be found at
        <eref target="https://github.com/USER/REPO"/>.</t>
    </note>


  </front>

  <middle>


<?line 82?>

<section anchor="introduction"><name>Introduction</name>

<t>This draft considers the case of a device where each such functional instance is to be controlled by a set of data nodes with almost identical values from instance to instance.</t>

<t>Rather than defining a YANG model where all data nodes of all instances need to be configured one by one in the device running data store by the management system (e.g. a NC client), this document presents the idea of a “generic data model” in which the running data store is configured with a list of instances without explicit data node being configured and the instruction to locally populate each instance's data nodes with a copy of a "model" data node set (called "template") that is configured in the running data store.</t>

<t>Although the data nodes of instances have largely similar values across, a small number of data nodes may however need to have a value that differs from the ones in the common template. The generic method presented in this document also gives the possibility to overrule or complement values originating from the template, on a per instance basis.</t>

</section>
<section anchor="concept"><name>Concept</name>

<t>a)Identify the set of replicable data nodes                         <br />
b)Configure a list of templates containing such data nodes          <br />
c)Configure a list of instances, each of them referring to one of the configured templates along with any customization.                    <br />
d)Parent device instantiating the required data, controls each instance, ie: merges the data from template and instance and produce the final set of configurations per instance, like Netconf merge.</t>

<figure><artwork><![CDATA[
 Eg:
 Identify common data nodes: 
 a, b, c

 Configure list of templates:
 Template common {
          container{
                    a=x
                    b=y
                    c=z
                   }
                 }
  Configure list of instances with template reference:
  Instance {
           Template-reference = “common”
           a=z
           b
           c
           }
  Parent device produces final configuration for each instance:
   Instance {
             a=z
             b=y
             c=z
            }
]]></artwork></figure>

</section>
<section anchor="template-mechanism"><name>Template Mechanism</name>

<t>The templates concept can be achieved with existing yang constructs like grouping and uses statements.</t>

<t>Example:</t>

<t>A)By defining common structures using grouping,you avoid repeating code,ensure consistency,and make future changes easier since modifications only need to happen in one place.</t>

<t>Example:
    grouping interface-config {
                         leaf interface-name {
                         type string;
                         }
                         leaf admin-status {
                         type boolean;
                                     }
                         }
    Here, the interface-config grouping defines a common structure that could be reused across different YANG modules or different parts of the same module.
B) "Uses" yang construct: The uses statement applies a previously defined grouping. This allows the grouped set of definitions to be instantiated where needed in the model. 
    Example:  container interfaces {
                             list interface {
                             key "interface-name";
                             uses interface-config;
                             }
                             }
    In this example, the uses statement applies the interface-config grouping defined earlier.</t>

<t>While conceptually, the idea of templates improves the re-usability and consistency factor, there are certain nuances, which needs to be addressed while handling data nodes in the grouping with defaults and mandatories and leafrefs.</t>

<t>If the grouping created with replicable data nodes contains default or mandatory nodes, and such groupings are used both in the template and in the instance, there is a possibility of overwriting the configured value of the template with the default value in the instance due to the merge operation.</t>

<t>When using leafref inside a grouping (which acts as a template), Extra care must be taken on the path specified. This is because grouping is essentially a reusable blueprint, and the leafref path must be resolved correctly when the grouping is used in different contexts.
There are two primary approaches to using leafref in templates:
A)Absolute Paths: These reference a specific location in the YANG tree.
B)Relative Paths: These are defined relative to the location where the grouping is used.
While there is no recommended option to resolve the path, it is a designers choice to choose Absolute path where the referred path is a fixed well defined global path and relative path which could be flexible and re-usable depending on the context in which the groupings are defined.</t>

<t>In order to solve the issue with defaults and mandatories, existing yang language provides us with a powerful construct: "refine"</t>

<t>The refine statement in YANG is used to modify or refine the definitions of a grouping when it is applied using the uses statement. This is particularly useful when the same template (or grouping) is reused in different contexts but needs to be adjusted slightly without altering the original grouping definition.
While the refine statement is powerful, it can only be applied within the context of a uses statement, and it allows fine-tuning of things like mandatory requirements, default values, descriptions, and other constraints.</t>

<t>How refine Works:
The basic workflow for using refine with templates involves:
1.Defining a grouping(without mandatories and defaults), which acts as a template.
2.Applying the grouping with the uses statement.
3.Using the refine statement to modify specific characteristics of the applied grouping in a particular context(refine mandatories and defaults).</t>

<t>Example of Using refine with Templates
Step-1: Defining a Grouping (Template) Here, we define a basic grouping for an interface configuration.</t>

<t>grouping interface-config {
    leaf interface-name {
        type string;
        mandatory true;
        description "Name of the interface.";
    }
    leaf admin-status {
        type boolean;
        default "false";
        description "Administrative status of the interface.";
    }
}
Step-2: Applying the Grouping with uses</t>

<t>container interfaces {
    list interface {
        key "interface-name";
        uses interface-config;
    }
}</t>

<t>At this point, we’ve reused the interface-config template for our interface list. Now, we’ll refine this grouping to suit specific use cases.</t>

<t>Step-3: Refining the Grouping:
Let’s say in certain contexts we want to refine the interface-config grouping to:
1.Make the admin-status mandatory in certain cases.
2.Change the default value of admin-status.
3.Provide a more specific description for interface-name.</t>

<t>container special-interfaces {
    list interface {
        key "interface-name";
        uses interface-config {
            refine admin-status {
                mandatory true;
                default "true";
            }
            refine interface-name {
                description "Special interface name for critical operations.";
            }
        }
    }
}
In this example:
•We’ve applied the interface-config grouping within the special-interfaces container.
•The admin-status is made mandatory and its default value is set to true (instead of false).
•The interface-name description is updated to reflect the specific context in which this grouping is being used.</t>

</section>
<section anchor="benefits-of-templates-in-yang-design"><name>Benefits of Templates in YANG Design</name>

<t><list style="numbers" type="1">
  <t>Reusability:
Templates encourage reusability by allowing common structures to be defined once and reused multiple times. This reduces duplication and simplifies model management.</t>
  <t>Consistency:
By using templates, similar configurations are defined and applied uniformly, leading to more consistent data modeling and network configuration management.</t>
  <t>Simplified Maintenance:
When a template is modified, all places where it is used will automatically reflect those changes, reducing the effort required to maintain and update the model.</t>
  <t>Modularity:
Templates promote a modular approach to YANG model design. By splitting the model into reusable parts, it becomes easier to scale and extend.</t>
</list></t>

</section>
<section anchor="conclusion"><name>Conclusion</name>

<t>Using templates (grouping and uses) in YANG allows for efficient reuse of model components. The refine statement provides flexibility to adjust certain properties like mandatory or default in specific contexts. leafref enables cross-referencing of leaf values within or across modules, with careful attention to path resolution. Proper use of these features helps create clean, modular, and maintainable YANG data models.</t>

</section>
<section anchor="conventions-and-definitions"><name>Conventions and Definitions</name>

<t>The key words "<bcp14>MUST</bcp14>", "<bcp14>MUST NOT</bcp14>", "<bcp14>REQUIRED</bcp14>", "<bcp14>SHALL</bcp14>", "<bcp14>SHALL
NOT</bcp14>", "<bcp14>SHOULD</bcp14>", "<bcp14>SHOULD NOT</bcp14>", "<bcp14>RECOMMENDED</bcp14>", "<bcp14>NOT RECOMMENDED</bcp14>",
"<bcp14>MAY</bcp14>", and "<bcp14>OPTIONAL</bcp14>" in this document are to be interpreted as
described in BCP 14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only when, they
appear in all capitals, as shown here.</t>

<?line -18?>

</section>
<section anchor="security-considerations"><name>Security Considerations</name>

<t>TODO Security</t>

</section>
<section anchor="iana-considerations"><name>IANA Considerations</name>

<t>This document has no IANA actions.</t>

</section>


  </middle>

  <back>



    <references title='Normative References' anchor="sec-normative-references">



<reference anchor="RFC2119">
  <front>
    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
    <author fullname="S. Bradner" initials="S." surname="Bradner"/>
    <date month="March" year="1997"/>
    <abstract>
      <t>In many standards track documents several words are used to signify the requirements in the specification. These words are often capitalized. This document defines these words as they should be interpreted in IETF documents. This document specifies an Internet Best Current Practices for the Internet Community, and requests discussion and suggestions for improvements.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="2119"/>
  <seriesInfo name="DOI" value="10.17487/RFC2119"/>
</reference>
<reference anchor="RFC8174">
  <front>
    <title>Ambiguity of Uppercase vs Lowercase in RFC 2119 Key Words</title>
    <author fullname="B. Leiba" initials="B." surname="Leiba"/>
    <date month="May" year="2017"/>
    <abstract>
      <t>RFC 2119 specifies common key words that may be used in protocol specifications. This document aims to reduce the ambiguity by clarifying that only UPPERCASE usage of the key words have the defined special meanings.</t>
    </abstract>
  </front>
  <seriesInfo name="BCP" value="14"/>
  <seriesInfo name="RFC" value="8174"/>
  <seriesInfo name="DOI" value="10.17487/RFC8174"/>
</reference>



    </references>




<?line 274?>

<section numbered="false" anchor="acknowledgments"><name>Acknowledgments</name>

<t>TODO acknowledge.</t>

</section>


  </back>

<!-- ##markdown-source:
H4sIAAAAAAAAA7Vb627cSHb+z6eotH+sFXS31zMD7KbnsitbGo8AS3YkGc4g
yI9qslpdKzbJZRUl9wwM+DUWyAKLPEoexU+S75xTVSS7W/IgSAyM3STrci7f
uVbNbDbLnjx5kj1RZ5U3bWX87KTVK6/OdXtb1PeVujabptTeZDTo0lR6Y5Rf
W6dWtjRq1dYbVdCMma+Leratu5aGzJq29nVel/NNoXytboxXzuvWm2KOdWQP
XmtVtxvtFRacyDrfxTV+mH13X7e3N23dNfjNr7DcZM6k/Fi3ylbWW10qZ3zX
TBUmqroqt6oyhnc1hfUgFpvY1nm1LOv8VtUrPJqycETIGxo+8daXZsLTHM1b
GpWvdXVjim9VYUrjjZro5bI1dxNlV7RPq3gOke3WdetpreNqq2rs1qq8hjAr
r3Jd0VpEhimmatl5Xlq3ZtWVqqo9bWYr39ZFl2Nc29Ytk3VVk2SYSnVvy5Km
gUmlO19DWjbXJeguutZWN8I90YW9twqLq64K5IuoTurqd5BwlZddAU5mv//9
REF6kxnp1XnwVAUplaxfouC1XprSpS9QkvoN6gkrChEOSlhusRat4Ou6ZNmC
d0gIP+ht3rUtCerOtM7W1bfgBQQWdU6rTWhbZT5oANAIJ9cEPB8QSTs4ddvq
DQF11q7yhVp737jFs2c31q+75TyvN89yvayfDUdhnZ+BFFJOa7BSbpgW0GFb
EUJQsmqEWK0Ku8IPolTgShJ6ySJOggOh0DlxQcxhTL5OogO+n84/bEpm6N/O
X0+V8fl8Pj8ipmB9GYNpoSZvodDcNiVPU03ddGCUdFxaSBXI/fn44pUqtNdA
TwHuO0dfdS8Tb/J1Zf/amfkkE8hi2S0oncUhsxVkYUh1kyzH803dbhdQ9KrO
siD5RdA1zwOYV/bQ9Mx1y411xLLfNph0dnr9o1JPlC5djV1tVZjG4K/KT6Zq
QlZQtzBXejg7foF/CIRnl9c/TrKq2yxNu8jAmllk2NJBlp1bKN92JgMPX2fA
lF6ounFZgt0CJus3dZHdmi1eFotMzZIoHD3ADZFy+DdxoxxMRy9taf02uzNV
h92UCou9f4Xfwsp7bEGSfUVf8HajbUkD/hzhCGThtW7zdQ+6wbdnvJagcKHe
XZ1ePrs8ffsG78RCDk96fXx9enWdZTBzOBVQBrIxRSm4i1IUc1lDTl69NS5f
W/5Wtze6sr8AJ3W1UBf1rdX8PgeLCzglf2/aht8Y4aLlJeYNL/HniiYIO7t7
Xa3tVqtjtwYY/ndbOVphrnmFx3Y6MabRt+pS/0UDXb9hr5drU1XaDvcqeI15
K2sMdqvYAu0dVJ0RzPunbDabKb10vtW5z7KzKtiXcfammvZI6p0WPMKsMCtb
wbdhWpf7rsX3mn0+zKRrmWA4qbVO/l83TWkxYdOVno3b241xU9g3RQnLvvwe
UFF3GvbB86ccvmAC8EhmtbK5NVW+JXe80ZW+IWiCNaz1gUyADMLN4R2NMwOq
yQsb52QPdQ+RwVOE4QpmY0ow9tfOtsxhY+CFIJddTsCbW2sao5WzG1vqNrGO
ZRvtKXFQOm9r5waeMm6E+LnBM+Ja9n5NjpJlbL0z5UoVtXHV509/82qtsbUW
d1kiJAcuJirYNtPRmNxCGMptK68/QFGFJRfGwT7xPcX7O1PWDYIKfKYntoF0
vEtjZqW9NVANNrUczNew85u1kEbeh/lDbO/gxbUTBwGhTznmTNlJAAZTpasC
QfmGGIzyH0xfm7IhQcOLt/YXw6ORBVWFbgt6Hkt6zgjUtDgFeHDRlPWWlp6q
Y8iZpQrWbG4YWesaMSFhaoWgT8tgIincWyjsqZnfzElt3XLmtg7cuyPgwIIp
yyovg/gAqm1EJXBCuIHIhP3BwrYi6nNOe0KaVFP2UpYc6mknw2Gqj1BzidlE
b2k0K6qsgd7Ix1ACkQJIC4F1YzaITABE7RuERR9zkbEgSKSwxmAiXjR4p0tb
yJIIALkp2EiLzsS8Q3Zou6oiS2JqHYITkiyoJZC8NLAwTNvQe9qGfxC+bQ6h
EyxoKZErIeQec+zNDSUMTBRCa6s58RORE/+UURX2zhYdKZj2FWdDUCWL35DK
2Q/UHbY2iAOYg60a8j/YLhhstCimFFG7oxdIQTCdWHWUP9YrybF6PBJda3uz
LvGfJwCUrH3E8A6T7tk6JaNgzaftMa2Bcdslvru67IKLQ5oDnN1Q2sHjZZ25
2iULTpOcEDmQGwNWYcCytHhJu4GS7oyIc+jshCxaAvuBTiRyd6IKESjoJ5RD
yyujxRHrEllCASTeISZoojeghoN/ib86zUmbliTVdU1TU1VC8K1XqxnGztya
XBNnrAZmfeYpx+/KIgDe2QIWUpBW9IiR4O458WVvK7qVDI3dgOR1undkTddC
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

-->

</rfc>

